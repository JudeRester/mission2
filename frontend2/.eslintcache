[{"D:\\Mission\\mission2\\frontend2\\src\\index.tsx":"1","D:\\Mission\\mission2\\frontend2\\src\\components\\upload\\Upload.tsx":"2","D:\\Mission\\mission2\\frontend2\\src\\components\\detail\\Info.tsx":"3","D:\\Mission\\mission2\\frontend2\\src\\components\\login\\Login.tsx":"4","D:\\Mission\\mission2\\frontend2\\src\\components\\commons\\Header.tsx":"5","D:\\Mission\\mission2\\frontend2\\src\\components\\detail\\index.tsx":"6","D:\\Mission\\mission2\\frontend2\\src\\components\\main\\index.tsx":"7","D:\\Mission\\mission2\\frontend2\\src\\components\\upload\\DropZone.tsx":"8","D:\\Mission\\mission2\\frontend2\\src\\components\\commons\\Sidebar.tsx":"9","D:\\Mission\\mission2\\frontend2\\src\\modules\\fileList.ts":"10","D:\\Mission\\mission2\\frontend2\\src\\App.tsx":"11","D:\\Mission\\mission2\\frontend2\\src\\modules\\member.ts":"12"},{"size":517,"mtime":1612265298605,"results":"13","hashOfConfig":"14"},{"size":15561,"mtime":1612950179982,"results":"15","hashOfConfig":"14"},{"size":9891,"mtime":1613336652853,"results":"16","hashOfConfig":"14"},{"size":5826,"mtime":1612947847461,"results":"17","hashOfConfig":"14"},{"size":1645,"mtime":1612519140273,"results":"18","hashOfConfig":"14"},{"size":455,"mtime":1612801931270,"results":"19","hashOfConfig":"14"},{"size":246,"mtime":1612779002697,"results":"20","hashOfConfig":"14"},{"size":5447,"mtime":1612488389211,"results":"21","hashOfConfig":"14"},{"size":3065,"mtime":1612779002590,"results":"22","hashOfConfig":"14"},{"size":1063,"mtime":1612363013702,"results":"23","hashOfConfig":"14"},{"size":740,"mtime":1612488389192,"results":"24","hashOfConfig":"14"},{"size":875,"mtime":1612265298631,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1sy8lr4",{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Mission\\mission2\\frontend2\\src\\index.tsx",[],["54","55"],"D:\\Mission\\mission2\\frontend2\\src\\components\\upload\\Upload.tsx",["56","57","58","59","60","61","62"],"import React, { useState, FormEvent, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styled from '@emotion/styled';\r\nimport DropZone from './DropZone';\r\nimport { useHistory } from 'react-router';\r\nimport arrayToTree from 'array-to-tree';\r\nimport { ExpandMore, ChevronRight } from '@material-ui/icons'\r\nimport { Button, CircularProgress, colors, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, makeStyles } from '@material-ui/core';\r\nimport { TreeItem, TreeView } from '@material-ui/lab';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../modules';\r\n//style \r\n\r\nlet DivWrapper = styled.div`\r\nwidth:100%;\r\nmargin: 0 auto;\r\npadding: 0px;\r\njustify-content: center;\r\nalign-items: center;\r\nbox-sizing: border-box;\r\n`;\r\n\r\nlet DivContainer = styled.div`\r\nwidth: 100%;\r\nmin-height: 100vh;\r\ndisplay:block;\r\n//flex-wrap: wrap;\r\nmargin-right: auto;\r\nmargin-left: auto;\r\npadding-left: 15px;\r\npadding-right: 15px;\r\npadding-top: 15px;\r\n// justify-content: center;\r\n// align-items: center;\r\n// padding: 15px;\r\nbackground: #ebeeef;\r\n`;\r\n\r\nlet DivTitleContainer = styled.div`\r\n// width:100%;\r\ndisplay:flex;\r\nmargin-bottom: 20px;\r\nborder-bottom: 1px solid #eaeaea;\r\n`;\r\n\r\nlet DivBox = styled.div`\r\nmax-width: 80%;\r\n// min-width: 670px;\r\nmargin: auto;\r\nbackground: #fff;\r\n// padding:10px;\r\n// overflow: hidden;\r\nposition: relative;\r\npadding: 20px;\r\nborder-radius: 3px;\r\nbox-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px;\r\n`;\r\n\r\nconst DivInputGroup = styled.div`\r\nwidth: 100%;\r\n  position: relative;\r\n  border-bottom: 1px solid #b2b2b2;\r\n  margin-bottom: 26px;\r\n`;\r\n\r\nconst DivTagGroup = styled.div`\r\nwidth:100%;\r\nposition:relative;\r\nmargin-bottom:26px;\r\ndisplay:block;\r\n`;\r\n\r\nconst SpanInputLabel = styled.span`\r\nfont-family: Poppins-Regular;\r\n  font-size: 15px;\r\n  color: #808080;\r\n  line-height: 1.2;\r\n  text-align: right;\r\n  position: absolute;\r\n  top: 14px;\r\n  left: -105px;\r\n  width: 80px;\r\n`;\r\nconst InputText = styled.input`\r\nfont-family: Poppins-Regular;\r\n  font-size: 15px;\r\n  color: #555555;\r\n  line-height: 1.2;\r\n  height: 45px;\r\n  display: block;\r\n  width: 100%;\r\n  background: transparent;\r\n  padding: 0 5px;\r\n  outline:none;\r\n  border:none;\r\n`;\r\nconst FormLogin = styled.form`\r\nwidth: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  padding: 43px 88px 93px 150px;\r\n`;\r\n\r\nconst SpanTag = styled.span`\r\ndisplay:inline-block;\r\nbackground:#4abdff;\r\nmargin-right:5px;\r\nmargin-top:2px;\r\nmargin-bottom:2px;\r\npadding:5px 7px 5px 7px;\r\nborder-radius:4px;\r\ncolor:#fff;\r\n`;\r\n\r\nconst SpanTimes = styled.span`\r\nmargin: 3px;\r\nmargin-left 5px;\r\nfont-weight: bolder;\r\ncolor:#fff;\r\n&:hover{\r\n    cursor:pointer;\r\n    color:#cccccc;\r\n}\r\n&:active{\r\n    color:#7a7a7a;\r\n}\r\n`;\r\n\r\n\r\n//style end\r\nconst Upload = () => {\r\n    const history = useHistory()\r\n    let sessionUser = sessionStorage.getItem(\"sessionUser\");\r\n    const user = useSelector((state: RootState) => state.member)\r\n    if (sessionUser) {\r\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\r\n    }\r\n    let [title, setTitle] = useState<string>();\r\n    let [currentInputTag, setCurrentInputTag] = useState<string>('');\r\n    let [tags, setTags] = useState<Array<string>>([]);\r\n    let [filesState, setFilesState] = useState<Array<File>>([]);\r\n    let [categories, setCategories] = useState([]);\r\n    let [selectedCategory, setSelectedCategory] = useState<string>();\r\n    let [categoriesHavingChild, setCategoriesHavingChild] = useState<Array<string>>();\r\n    let [isTagDuplicated, setIsTagDuplicated] = useState<boolean>(false);\r\n    let [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n\r\n    const CHUNK_SIZE: number = 1024 * 1024 * 10;//10MB\r\n\r\n    useEffect(() => {\r\n        sessionUser = sessionStorage.getItem(\"sessionUser\");\r\n        if (sessionUser) {\r\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\r\n        }\r\n        axios.get(`/api/category/list`)\r\n            .then(response => {\r\n                setCategories(arrayToTree(response.data.result, { parentProperty: 'categoryParent', customID: 'categoryId' }))\r\n            })\r\n        console.log(user)\r\n    }, [user])\r\n    useEffect(() => {\r\n        let tempArray: Array<string> = [];\r\n        async function getParents(array: Array<TreeViews>) {\r\n            await array.map((node: TreeViews) => {\r\n                if (node.children) {\r\n                    tempArray.push(node.categoryId + '');\r\n                    getParents(node.children);\r\n                }\r\n            });\r\n            setCategoriesHavingChild(tempArray)\r\n        };\r\n        getParents(categories);\r\n    }, [categories])\r\n    interface TreeViews {\r\n        children?: TreeViews[];\r\n        categoryName: string;\r\n        categoryId: string;\r\n    }\r\n\r\n    interface CategoryProps {\r\n        category: TreeViews\r\n    }\r\n\r\n    const renderTrees = (nodes: TreeViews) => (\r\n        <TreeItem key={nodes.categoryId} nodeId={nodes.categoryId + ''} label={nodes.categoryName} classes={{ label: classes.label }}>\r\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTrees(node)) : null}\r\n        </TreeItem>\r\n    );\r\n\r\n    const Category = ({ category }: CategoryProps) => {\r\n        useEffect(() => {\r\n\r\n        }, [category]);\r\n        return renderTrees(category);\r\n    }\r\n\r\n    const handleToggle = (event: any, nodeIds: string[]) => {\r\n        event.preventDefault()\r\n    };\r\n    const handleNodeSelect = (event: any, nodeId: React.SetStateAction<string>) => {\r\n        setSelectedCategory(nodeId)\r\n    };\r\n\r\n    const handleAlertOpen = () => {\r\n        setAlertOpen(true)\r\n    }\r\n    const handleAlertClose = () => {\r\n        setAlertOpen(false)\r\n    }\r\n\r\n    const fileUpload = (seq: number) => {\r\n        filesState.forEach(async (item, i) => {\r\n            if (item.size > CHUNK_SIZE) {\r\n                const chunks = fileSlicer(item)\r\n                let data = {\r\n                    \"assetSeq\": seq,\r\n                    \"assetOriginName\": item.name,\r\n                    \"assetSize\": item.size,\r\n                    \"assetUuidName\": '',\r\n                    \"isLastChunk\": false,\r\n                    \"location\": '',\r\n                    \"assetType\": item.type,\r\n                    \"category\": selectedCategory\r\n                }\r\n                const result = await axios.post(`/api/prelargefile`,\r\n                    data\r\n                )\r\n                data[\"assetUuidName\"] = result.data.result.assetUuidName;\r\n                data[\"location\"] = result.data.result.location;\r\n                for (let i = 0; i < chunks.length; i++) {\r\n                    if ((i + 1) === chunks.length) {\r\n                        data[\"isLastChunk\"] = true;\r\n                    }\r\n                    try {\r\n                        console.log(data.isLastChunk)\r\n                        const result = await axios.post(`/api/largefile`,\r\n                            chunks[i],\r\n                            {\r\n                                params: data,\r\n                                headers: { 'Content-Type': 'multipart/form-data' }\r\n                            }\r\n                        )\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                    }\r\n                }\r\n            } else {\r\n                try {\r\n                    const formData = new FormData();\r\n                    formData.append(\"file\", item);\r\n                    formData.append(\"assetSeq\", '' + seq);\r\n                    formData.append(\"assetType\", item.type);\r\n                    formData.append(\"category\", selectedCategory)\r\n                    await axios.post(`/api/file`,\r\n                        formData\r\n                    )\r\n\r\n                }\r\n                catch (err) {\r\n\r\n                }\r\n            }\r\n            if (i === filesState.length - 1) {\r\n                await fileUploadComplete(seq)\r\n            }\r\n        })\r\n\r\n    }\r\n    const fileUploadComplete = async (seq: number) => {\r\n        try {\r\n            await axios.post(`/api/complete`,\r\n                { assetSeq: seq, tags: tags.toString() },\r\n                {\r\n                    headers: {\r\n                        'Content-type': 'application/json',\r\n                        'Access-Control-Allow-Origin': '*'\r\n                    }\r\n                })\r\n            setFilesState([]);\r\n\r\n            history.push('/')\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    const submitFiles = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        if (filesState.length!=0 && title && selectedCategory) {\r\n            let data = { assetTitle: title, assetCategory:selectedCategory }\r\n            try {\r\n                const response = await axios.post(`/api/asset`,\r\n                    data,\r\n                    {\r\n                        headers: {\r\n                            'Content-type': 'application/json',\r\n                            'Access-Control-Allow-Origin': '*'\r\n                        }\r\n                    });\r\n                // setAssetSeq();\r\n                fileUpload(response.data.result.assetSeq);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n            }\r\n        } else {\r\n            handleAlertOpen();\r\n        }\r\n    }\r\n\r\n    const addTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\" || e.key === \"Tab\") {\r\n            e.preventDefault();\r\n            let inputTag = currentInputTag.trim();\r\n            if (inputTag !== \"\") {\r\n                if (tags.filter(tag => tag === inputTag).length <= 0) {\r\n                    setIsTagDuplicated(false);\r\n                    let tmp: Array<string> = [...tags].concat(currentInputTag);\r\n                    setTags(tmp);\r\n                } else {\r\n                    setIsTagDuplicated(true)\r\n                }\r\n            }\r\n            setCurrentInputTag('');\r\n        }\r\n    }\r\n\r\n    const removeTag = (targetTag: string) => {\r\n        const targetTagIndex = tags.findIndex(e => e === targetTag);\r\n        tags.splice(targetTagIndex, 1);\r\n        setTags([...tags]);\r\n    }\r\n\r\n    // 파일을 청크로 나누는 함수\r\n    const fileSlicer = (target: File) => {\r\n        let chunks = [];\r\n        let chunkIndex = 0; // 파일 자를 시작 위치\r\n        const CHUNK_COUNT = Math.ceil(target.size / CHUNK_SIZE);//청크갯수\r\n        for (let i = 1; i <= CHUNK_COUNT; i++) {\r\n            if (i === CHUNK_COUNT)\r\n                chunks.push(target.slice(chunkIndex))\r\n            else\r\n                chunks.push(target.slice(chunkIndex, chunkIndex + CHUNK_SIZE))\r\n            chunkIndex += CHUNK_SIZE;\r\n        }\r\n        return chunks\r\n    }\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            height: 240,\r\n            flexGrow: 1,\r\n            maxWidth: 400,\r\n            display: 'contents',\r\n        },\r\n        label: {\r\n            textAlign: 'left'\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n\r\n            <DivWrapper>\r\n                <DivContainer>\r\n                    <DivBox>\r\n                        <DivTitleContainer>\r\n                            <h2 className=\"h3 mb-2 text-gray-800\">업로드</h2>\r\n                        </DivTitleContainer>\r\n                        <FormLogin\r\n                        // onSubmit={submitFiles}\r\n                        >\r\n                            <DivInputGroup>\r\n                                <SpanInputLabel>제목</SpanInputLabel>\r\n                                <InputText type=\"text\" value={title} onChange={(e) => { setTitle(e.target.value) }} className=\"logininput\" />\r\n                            </DivInputGroup>\r\n                            \r\n                                <DivInputGroup>\r\n                                    <SpanInputLabel>카테고리</SpanInputLabel>\r\n                                    {categories.length > 0 ? (\r\n                                    <TreeView\r\n                                        onNodeToggle={handleToggle}\r\n                                        onNodeSelect={handleNodeSelect}\r\n                                        className={classes.root}\r\n                                        // defaultCollapseIcon={<ExpandMore />}\r\n                                        // defaultExpandIcon={<ChevronRight />}\r\n                                        expanded={categoriesHavingChild}\r\n                                    >\r\n                                        <div>\r\n                                            {categories.map((category: TreeViews) => {\r\n                                                return <Category key={category.categoryId} category={category} />\r\n                                            })}\r\n                                        </div>\r\n                                    </TreeView>\r\n                                    ):\r\n                                    ( <CircularProgress />)\r\n                                }\r\n                                </DivInputGroup>\r\n\r\n                            \r\n                            <DivInputGroup>\r\n                                <SpanInputLabel>태그</SpanInputLabel>\r\n                                <InputText type=\"text\" value={currentInputTag} onChange={(e) => { setCurrentInputTag(e.target.value) }} onKeyPress={(e) => { addTag(e) }} placeholder=\"태그 입력 후 엔터\" />\r\n                            </DivInputGroup>\r\n                            <DivTagGroup>\r\n                                {\r\n                                    isTagDuplicated ?\r\n                                        <div style={{ color: 'red' }}>\r\n                                            중복된 태그입니다.\r\n                                    </div> : null\r\n                                }\r\n\r\n                                {tags.map((data, i) =>\r\n                                    <SpanTag key={i}>{data}<SpanTimes onClick={() => { removeTag(data) }}>×</SpanTimes></SpanTag>\r\n                                )}\r\n                            </DivTagGroup>\r\n                            <DivInputGroup>\r\n                                <DropZone filesState={filesState} setFilesState={setFilesState} />\r\n                            </DivInputGroup>\r\n                            <DivTagGroup>\r\n                                <button onClick={submitFiles}>저장</button>\r\n                                <button type=\"reset\">취소</button>\r\n                            </DivTagGroup>\r\n\r\n                        </FormLogin>\r\n                    </DivBox>\r\n                </DivContainer>\r\n            </DivWrapper>\r\n\r\n            <Dialog\r\n                open={alertOpen}\r\n                onClose={handleAlertClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"입력정보를 확인해주세요\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        (제목, 카테고리, 파일첨부는 필수요소 입니다.)\r\n          </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAlertClose} color=\"primary\">\r\n                        확인\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Upload;","D:\\Mission\\mission2\\frontend2\\src\\components\\detail\\Info.tsx",["63","64","65","66","67","68","69","70"],"D:\\Mission\\mission2\\frontend2\\src\\components\\login\\Login.tsx",["71","72","73","74"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport styled from '@emotion/styled'\r\nimport member, { login } from '../../modules/member';\r\nimport { RootState } from '../../modules';\r\n\r\n\r\nlet DivWrapper = styled.div`\r\nwidth:100%;\r\nmargin: 0 auto;\r\npadding: 0px;\r\nbox-sizing: border-box;\r\n`;\r\n\r\nlet DivLoginContainer = styled.div`\r\nwidth: 100%;\r\n  min-height: 100vh;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 15px;\r\n  background: #ebeeef;\r\n`;\r\n\r\nlet DivLoginBox = styled.div`\r\nwidth: 670px;\r\nbackground: #fff;\r\nborder-radius: 10px;\r\noverflow: hidden;\r\nposition: relative;\r\nbox-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);\r\n`;\r\nlet DivLoginTitle = styled.div`\r\n&:first-child{width: 100%;\r\nposition: relative;\r\nz-index: 1;\r\ndisplay: -webkit-box;\r\ndisplay: -webkit-flex;\r\ndisplay: -moz-box;\r\ndisplay: -ms-flexbox;\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nflex-direction: column;\r\nalign-items: center;\r\n\r\nbackground-repeat: no-repeat;\r\nbackground-size: cover;\r\nbackground-position: center;\r\n\r\npadding: 70px 15px 74px 15px;\r\n\r\n&:before{\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    z-index: -1;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: rgba(54,84,99,0.7);\r\n}    \r\n}\r\n`;\r\n\r\nlet SpanLoginTitle = styled.span`\r\nfont-family: Poppins-Bold;\r\nfont-size: 30px;\r\ncolor: #fff;\r\ntext-transform: uppercase;\r\nline-height: 1.2;\r\ntext-align: center;\r\n`;\r\n\r\nconst FormLogin = styled.form`\r\nwidth: 100%;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  padding: 43px 88px 93px 190px;\r\n  box-sizing:border-box;\r\n`;\r\n\r\nconst DivLoginGroup = styled.div`\r\nwidth: 100%;\r\n  position: relative;\r\n  border-bottom: 1px solid #b2b2b2;\r\n  margin-bottom: 26px;\r\n`;\r\n\r\nconst SpanLoginLabel = styled.span`\r\nfont-family: Poppins-Regular;\r\n  font-size: 15px;\r\n  color: #808080;\r\n  line-height: 1.2;\r\n  text-align: right;\r\n  position: absolute;\r\n  top: 14px;\r\n  left: -105px;\r\n  width: 80px;\r\n`;\r\nconst InputLogin = styled.input`\r\nfont-family: Poppins-Regular;\r\n  font-size: 15px;\r\n  color: #555555;\r\n  line-height: 1.2;\r\n  height: 45px;\r\n  display: block;\r\n  width: 100%;\r\n  background: transparent;\r\n  padding: 0 5px;\r\n  outline:none;\r\n  border:none;\r\n`;\r\n\r\nconst SpanLoginFocus = styled.span`\r\n&:first-child{position: absolute;\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n  &:before{\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    bottom: -1px;\r\n    left: 0;\r\n    width:0;\r\n    height: 2px;\r\n    transition: all 0.6s;\r\n    background: #57b846;\r\n  }\r\n  ${InputLogin}:focus + &:before{\r\n    width: 100%;\r\n  }\r\n}\r\n`;\r\n\r\nconst DivButtonWrapper = styled.div`\r\nwidth: 100%;\r\ndisplay: -webkit-box;\r\ndisplay: -webkit-flex;\r\ndisplay: -moz-box;\r\ndisplay: -ms-flexbox;\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\n`;\r\n\r\nconst ButtonLogin = styled.button`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\npadding: 0 20px;\r\nmin-width: 160px;\r\nheight: 50px;\r\nbackground-color: #57b846;\r\nborder-radius: 25px;\r\n\r\nfont-family: Poppins-Regular;\r\nfont-size: 16px;\r\ncolor: #fff;\r\n// line-height: 1.2;\r\n\r\ntransition: all 0.4s;\r\n&:hover{\r\n    background-color: #555555;\r\n    cursor:pointer;\r\n}&:active{\r\n    background-color: #222222;\r\n}\r\n`;\r\n\r\n\r\n//style end\r\n\r\nfunction Login() {\r\n  let [username, setUsername] = useState(\"\");\r\n  let [password, setPassword] = useState(\"\");\r\n  let [isLoginSuccess,setIsLoginSuccess]=useState(true);\r\n  const dispatch = useDispatch();\r\n  async function handleLoginButton(e: any) {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(`http://localhost:8080/api/authenticate`,\r\n        { username: username, password: password },\r\n        {\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      // history.push(\"/main\");\r\n      dispatch(login({userId:'', isLogined:true}))\r\n      sessionStorage.setItem(\"sessionUser\", JSON.stringify(response.data));\r\n    } catch (err) {\r\n      setIsLoginSuccess(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <DivWrapper>\r\n        <DivLoginContainer>\r\n          <DivLoginBox>\r\n            <DivLoginTitle>\r\n              <SpanLoginTitle>로그인</SpanLoginTitle>\r\n            </DivLoginTitle>\r\n            <FormLogin onSubmit={handleLoginButton}>\r\n              <DivLoginGroup>\r\n                <SpanLoginLabel>아이디</SpanLoginLabel>\r\n                <InputLogin type=\"text\" className=\"logininput\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                {/* <SpanLoginFocus></SpanLoginFocus>  */}\r\n              </DivLoginGroup>\r\n              <DivLoginGroup>\r\n                <SpanLoginLabel>비밀번호</SpanLoginLabel>\r\n                <InputLogin type=\"password\" className=\"logininput\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                {/* <SpanLoginFocus></SpanLoginFocus>  */}\r\n              </DivLoginGroup>\r\n                {!isLoginSuccess ? \r\n                  <div style={{color:'red'}}>\r\n                    로그인에 실패했습니다.\r\n                  </div> :\r\n                  null\r\n                }\r\n              <DivButtonWrapper>\r\n                <ButtonLogin onClick={handleLoginButton}>로그인</ButtonLogin>\r\n              </DivButtonWrapper>\r\n            </FormLogin>\r\n          </DivLoginBox>\r\n        </DivLoginContainer>\r\n      </DivWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\Mission\\mission2\\frontend2\\src\\components\\commons\\Header.tsx",[],"D:\\Mission\\mission2\\frontend2\\src\\components\\detail\\index.tsx",[],"D:\\Mission\\mission2\\frontend2\\src\\components\\main\\index.tsx",[],"D:\\Mission\\mission2\\frontend2\\src\\components\\upload\\DropZone.tsx",["75","76","77","78","79","80","81","82","83","84","85"],"import React, { forwardRef, useState, useEffect, useRef, InputHTMLAttributes } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { RootState } from '../../modules';\r\nimport { add, remove } from '../../modules/fileList';\r\nimport { preProcessFile } from 'typescript';\r\n\r\nconst DivContainer = styled.div`\r\n`;\r\n\r\nconst PContainer = styled.p`\r\ncolor: red;\r\ntext-align: center;\r\n`;\r\n\r\nconst DivDropConatiner = styled.div`\r\n// display: flex;\r\nalign-items: center;\r\njustify-content: center;\r\nmargin: 0;\r\n// width: 800px;\r\nheight: 200px;\r\nborder: 4px dashed #4aa1f3;\r\n`;\r\n\r\nconst DivUploadIcon = styled.div`\r\nwidth: 50px;\r\nheight: 50px;\r\nbackground: url(/images/upload.svg) no-repeat center center; \r\nbackground-size: 100%;\r\ntext-align: center;\r\nmargin: 0 auto;\r\nmargin-top: 20px;\r\npadding-top: 30px;\r\n`;\r\n\r\nconst DivDropMessage = styled.div`\r\ntext-align: center;\r\ncolor: #4aa1f3;\r\nfont-family: Arial;\r\nfont-size: 20px;\r\n`;\r\n\r\nconst DivFileDisplay = styled.div`\r\n// position: fixed;\r\n// width: 805px;\r\n`;\r\n\r\nconst DivFileStatus = styled.div`\r\ndisplay:flex;\r\nwidth: 100%;\r\nvertical-align:top;\r\nmargin-top: 10px;\r\nmargin-bottom: 20px;\r\nposition: relative;\r\nline-height: 50px;\r\nheight: 50px;\r\n\r\n> div{\r\n    overflow:hidden;\r\n}\r\n`;\r\n\r\nconst DivFileType = styled.div`\r\ndisplay: inline-block!important;\r\nposition: absolute;\r\nfont-size: 12px;\r\nfont-weight: 700;\r\nline-height: 13px;\r\nmargin-top: 25px;\r\npadding: 0 4px;\r\nborder-radius: 2px;\r\nbox-shadow: 1px 1px 2px #abc;\r\ncolor: #fff;\r\nbackground: #0080c8;\r\ntext-transform: uppercase;\r\n`;\r\n\r\nconst SpanFileName = styled.span`\r\ndisplay: inline-block;\r\nvertical-align:top;\r\nmargin-left: 50px;\r\ncolor: #4aa1f3;\r\n`;\r\n\r\nconst SpanFileSize = styled.span`\r\ndisplay:inline-block;\r\nvertical-align:top;\r\ncolor:#30693D;\r\nmargin-left:10px;\r\nmargin-right:5px;\r\nmargin-left: 10px;\r\ncolor: #444242;\r\nfont-weight: 700;\r\nfont-size: 14px;\r\n`;\r\n\r\nconst SpanFileRemove = styled.span`\r\nposition: absolute;\r\ntop: 20px;\r\nright: 10px;\r\nline-height: 15px;\r\ncursor: pointer;\r\ncolor: red;\r\nmargin-right: -10px;\r\n`;\r\n\r\nconst SpanFileErrorMsg = styled.span`\r\ncolor:red;\r\n`;\r\n\r\nconst InputFileinput = styled.input`\r\ndisplay:none;\r\n`;\r\n\r\nconst DropZone = (props: any) => {\r\n    const fileList: File[] = props.filesState;\r\n    const setFileList = props.setFilesState;\r\n\r\n\r\n    const handleFiles = (files: FileList) => {\r\n        for (let i = 0; i < files.length; i++) {\r\n            if (fileList.filter((file: File) => file.name == files[i].name).length <= 0) {\r\n                setFileList((pre: File[]) => [...pre, files[i]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const dragEnter = (e: React.DragEvent<HTMLDivElement>) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const dragLeave = (e: React.DragEvent<HTMLDivElement>) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const fileDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n        e.preventDefault();\r\n        const files: FileList = e.dataTransfer.files;\r\n        if (files.length) {\r\n            handleFiles(files);\r\n        }\r\n    }\r\n\r\n    const fileSize = (size: number) => {\r\n        if (size === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(size) / Math.log(k));\r\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    }\r\n\r\n    const fileType = (fileName: string) => {\r\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\r\n    }\r\n\r\n    const removeFile = (name: string) => {\r\n        const targetIndex = fileList.findIndex((e: File) => e.name === name);\r\n        let tempFileList = [...fileList]\r\n        tempFileList.splice(targetIndex, 1)\r\n        setFileList(tempFileList)\r\n        // dispatch(remove(targetIndex))\r\n    }\r\n\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const fileInputClicked = () => {\r\n        fileInputRef.current.click();\r\n    }\r\n    const filesSelected = () => {\r\n        if (fileInputRef.current.files.length) {\r\n            handleFiles(fileInputRef.current.files);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DivContainer id=\"container\" onDrop={fileDrop} onDragLeave={dragLeave} onDragOver={dragOver} onDragEnter={dragEnter}>\r\n            <DivDropConatiner onClick={fileInputClicked}>\r\n                <DivDropMessage>\r\n                    <DivUploadIcon />\r\n                    파일을 드래그 & 드랍 하거나 클릭하여 업로드\r\n                </DivDropMessage>\r\n                <InputFileinput type=\"file\" multiple onChange={filesSelected} ref={fileInputRef} />\r\n            </DivDropConatiner>\r\n            <DivFileDisplay>\r\n                {fileList.map((data: File, i) =>\r\n                    <DivFileStatus key={i}>\r\n                        <div>\r\n                            <div className=\"file-type-logo\"></div>\r\n                            <DivFileType>{fileType(data.name)}</DivFileType>\r\n                            <SpanFileName >{data.name}</SpanFileName>\r\n                            <SpanFileSize>({fileSize(data.size)})</SpanFileSize>\r\n                            <SpanFileRemove onClick={() => removeFile(data.name)}>×</SpanFileRemove>\r\n                        </div>\r\n                    </DivFileStatus>\r\n                )}\r\n            </DivFileDisplay>\r\n        </DivContainer>\r\n    )\r\n}\r\n\r\nexport default DropZone;","D:\\Mission\\mission2\\frontend2\\src\\components\\commons\\Sidebar.tsx",["86","87","88"],"D:\\Mission\\mission2\\frontend2\\src\\modules\\fileList.ts",[],"D:\\Mission\\mission2\\frontend2\\src\\App.tsx",[],"D:\\Mission\\mission2\\frontend2\\src\\modules\\member.ts",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":7,"column":10,"nodeType":"95","messageId":"96","endLine":7,"endColumn":20},{"ruleId":"93","severity":1,"message":"97","line":7,"column":22,"nodeType":"95","messageId":"96","endLine":7,"endColumn":34},{"ruleId":"93","severity":1,"message":"98","line":8,"column":36,"nodeType":"95","messageId":"96","endLine":8,"endColumn":42},{"ruleId":"99","severity":1,"message":"100","line":152,"column":23,"nodeType":"101","endLine":152,"endColumn":60},{"ruleId":"102","severity":1,"message":"103","line":165,"column":47,"nodeType":"104","messageId":"105","endLine":165,"endColumn":49},{"ruleId":"93","severity":1,"message":"106","line":237,"column":31,"nodeType":"95","messageId":"96","endLine":237,"endColumn":37},{"ruleId":"107","severity":1,"message":"108","line":291,"column":30,"nodeType":"109","messageId":"110","endLine":291,"endColumn":32},{"ruleId":"93","severity":1,"message":"111","line":6,"column":5,"nodeType":"95","messageId":"96","endLine":6,"endColumn":10},{"ruleId":"93","severity":1,"message":"112","line":13,"column":5,"nodeType":"95","messageId":"96","endLine":13,"endColumn":13},{"ruleId":"93","severity":1,"message":"113","line":14,"column":5,"nodeType":"95","messageId":"96","endLine":14,"endColumn":17},{"ruleId":"93","severity":1,"message":"114","line":23,"column":10,"nodeType":"95","messageId":"96","endLine":23,"endColumn":20},{"ruleId":"93","severity":1,"message":"115","line":91,"column":11,"nodeType":"95","messageId":"96","endLine":91,"endColumn":16},{"ruleId":"99","severity":1,"message":"116","line":107,"column":8,"nodeType":"117","endLine":107,"endColumn":18,"suggestions":"118"},{"ruleId":"107","severity":1,"message":"119","line":112,"column":35,"nodeType":"109","messageId":"110","endLine":112,"endColumn":37},{"ruleId":"107","severity":1,"message":"108","line":113,"column":43,"nodeType":"109","messageId":"110","endLine":113,"endColumn":45},{"ruleId":"93","severity":1,"message":"120","line":2,"column":23,"nodeType":"95","messageId":"96","endLine":2,"endColumn":34},{"ruleId":"93","severity":1,"message":"121","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":14},{"ruleId":"93","severity":1,"message":"122","line":6,"column":10,"nodeType":"95","messageId":"96","endLine":6,"endColumn":19},{"ruleId":"93","severity":1,"message":"123","line":126,"column":7,"nodeType":"95","messageId":"96","endLine":126,"endColumn":21},{"ruleId":"93","severity":1,"message":"124","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":27},{"ruleId":"93","severity":1,"message":"125","line":1,"column":29,"nodeType":"95","messageId":"96","endLine":1,"endColumn":37},{"ruleId":"93","severity":1,"message":"126","line":1,"column":39,"nodeType":"95","messageId":"96","endLine":1,"endColumn":48},{"ruleId":"93","severity":1,"message":"127","line":1,"column":58,"nodeType":"95","messageId":"96","endLine":1,"endColumn":77},{"ruleId":"93","severity":1,"message":"122","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":19},{"ruleId":"93","severity":1,"message":"128","line":4,"column":10,"nodeType":"95","messageId":"96","endLine":4,"endColumn":13},{"ruleId":"93","severity":1,"message":"129","line":4,"column":15,"nodeType":"95","messageId":"96","endLine":4,"endColumn":21},{"ruleId":"93","severity":1,"message":"130","line":5,"column":10,"nodeType":"95","messageId":"96","endLine":5,"endColumn":24},{"ruleId":"93","severity":1,"message":"131","line":10,"column":7,"nodeType":"95","messageId":"96","endLine":10,"endColumn":17},{"ruleId":"93","severity":1,"message":"132","line":107,"column":7,"nodeType":"95","messageId":"96","endLine":107,"endColumn":23},{"ruleId":"107","severity":1,"message":"119","line":122,"column":59,"nodeType":"109","messageId":"110","endLine":122,"endColumn":61},{"ruleId":"93","severity":1,"message":"133","line":7,"column":5,"nodeType":"95","messageId":"96","endLine":7,"endColumn":14},{"ruleId":"93","severity":1,"message":"134","line":16,"column":5,"nodeType":"95","messageId":"96","endLine":16,"endColumn":15},{"ruleId":"93","severity":1,"message":"135","line":17,"column":5,"nodeType":"95","messageId":"96","endLine":17,"endColumn":11},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"@typescript-eslint/no-unused-vars","'ExpandMore' is defined but never used.","Identifier","unusedVar","'ChevronRight' is defined but never used.","'colors' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'sessionUser' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'result' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Paper' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'StarBorder' is defined but never used.","'items' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assetInfo' and 'findParent'. Either include them or remove the dependency array.","ArrayExpression",["138"],"Expected '===' and instead saw '=='.","'useSelector' is defined but never used.","'member' is defined but never used.","'RootState' is defined but never used.","'SpanLoginFocus' is assigned a value but never used.","'forwardRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'InputHTMLAttributes' is defined but never used.","'add' is defined but never used.","'remove' is defined but never used.","'preProcessFile' is defined but never used.","'PContainer' is assigned a value but never used.","'SpanFileErrorMsg' is assigned a value but never used.","'TextField' is defined but never used.","'Typography' is defined but never used.","'AppBar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [assetInfo, assetSeq, findParent]",{"range":"141","text":"142"},[2869,2879],"[assetInfo, assetSeq, findParent]"]