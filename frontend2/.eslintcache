[{"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/reportWebVitals.ts":"1","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/index.ts":"2","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/ModInfo.tsx":"3","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/MemberManager/members.tsx":"4","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SideHeader.tsx":"5","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/index.tsx":"6","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/Upload.tsx":"7","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/index.tsx":"8","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/index.tsx":"9","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/MemberManager/index.tsx":"10","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SearchWindow.tsx":"11","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/member.ts":"12","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/index.tsx":"13","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/index.tsx":"14","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/Info.tsx":"15","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/login/Login.tsx":"16","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/Posts.tsx":"17","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/DropZone.tsx":"18","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/fileList.ts":"19","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/CategoryManager/categories.tsx":"20","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/App.tsx":"21","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/util/api.ts":"22","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/CategoryManager/index.tsx":"23"},{"size":425,"mtime":1612155094723,"results":"24","hashOfConfig":"25"},{"size":257,"mtime":1612316359625,"results":"26","hashOfConfig":"25"},{"size":15892,"mtime":1614241713096,"results":"27","hashOfConfig":"25"},{"size":32026,"mtime":1614310532962,"results":"28","hashOfConfig":"25"},{"size":15866,"mtime":1614240128463,"results":"29","hashOfConfig":"25"},{"size":500,"mtime":1612155094723,"results":"30","hashOfConfig":"25"},{"size":18399,"mtime":1614240376844,"results":"31","hashOfConfig":"25"},{"size":388,"mtime":1613454456600,"results":"32","hashOfConfig":"25"},{"size":345,"mtime":1613432960743,"results":"33","hashOfConfig":"25"},{"size":158,"mtime":1614126527983,"results":"34","hashOfConfig":"25"},{"size":6819,"mtime":1613534235297,"results":"35","hashOfConfig":"25"},{"size":904,"mtime":1614238847852,"results":"36","hashOfConfig":"25"},{"size":2348,"mtime":1614238920521,"results":"37","hashOfConfig":"25"},{"size":382,"mtime":1613438388671,"results":"38","hashOfConfig":"25"},{"size":16985,"mtime":1614248681205,"results":"39","hashOfConfig":"25"},{"size":6141,"mtime":1614247180295,"results":"40","hashOfConfig":"25"},{"size":6119,"mtime":1614248592921,"results":"41","hashOfConfig":"25"},{"size":5244,"mtime":1612411444510,"results":"42","hashOfConfig":"25"},{"size":1018,"mtime":1612316348756,"results":"43","hashOfConfig":"25"},{"size":14193,"mtime":1614317929200,"results":"44","hashOfConfig":"25"},{"size":679,"mtime":1614152684885,"results":"45","hashOfConfig":"25"},{"size":857,"mtime":1614248223279,"results":"46","hashOfConfig":"25"},{"size":171,"mtime":1614146476229,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"b90rkt",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/reportWebVitals.ts",[],["106","107"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/index.ts",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/ModInfo.tsx",["108","109","110","111","112","113","114"],"import React, { useState, FormEvent, useEffect } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport { useHistory } from 'react-router';\nimport arrayToTree from 'array-to-tree';\nimport { ExpandMore, ChevronRight, Comment, Delete } from '@material-ui/icons'\nimport { Button, CircularProgress, colors, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles } from '@material-ui/core';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\nimport api from '../../util/api';\n//style \n\nlet DivWrapper = styled.div`\nwidth:100%;\nmargin: 0 auto;\npadding: 0px;\njustify-content: center;\nalign-items: center;\nbox-sizing: border-box;\n`;\n\nlet DivContainer = styled.div`\nwidth: 100%;\nmin-height: 100vh;\ndisplay:block;\n//flex-wrap: wrap;\nmargin-right: auto;\nmargin-left: auto;\npadding-left: 15px;\npadding-right: 15px;\npadding-top: 15px;\n// justify-content: center;\n// align-items: center;\n// padding: 15px;\nbackground: #ebeeef;\n`;\n\nlet DivTitleContainer = styled.div`\n// width:100%;\ndisplay:flex;\nmargin-bottom: 20px;\nborder-bottom: 1px solid #eaeaea;\n`;\n\nlet DivBox = styled.div`\nmax-width: 80%;\n// min-width: 670px;\nmargin: auto;\nbackground: #fff;\n// padding:10px;\n// overflow: hidden;\nposition: relative;\npadding: 20px;\nborder-radius: 3px;\nbox-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px;\n`;\n\nconst DivInputGroup = styled.div`\nwidth: 100%;\n  position: relative;\n  border-bottom: 1px solid #b2b2b2;\n  margin-bottom: 26px;\n`;\n\nconst DivTagGroup = styled.div`\nwidth:100%;\nposition:relative;\nmargin-bottom:26px;\ndisplay:block;\n`;\n\nconst SpanInputLabel = styled.span`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #808080;\n  line-height: 1.2;\n  text-align: right;\n  position: absolute;\n  top: 14px;\n  left: -105px;\n  width: 80px;\n`;\nconst InputText = styled.input`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #555555;\n  line-height: 1.2;\n  height: 45px;\n  display: block;\n  width: 100%;\n  background: transparent;\n  padding: 0 5px;\n  outline:none;\n  border:none;\n`;\nconst FormLogin = styled.form`\nwidth: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 43px 88px 93px 150px;\n`;\n\nconst SpanTag = styled.span`\ndisplay:inline-block;\nbackground:#4abdff;\nmargin-right:5px;\nmargin-top:2px;\nmargin-bottom:2px;\npadding:5px 7px 5px 7px;\nborder-radius:4px;\ncolor:#fff;\n`;\n\nconst SpanTimes = styled.span`\nmargin: 3px;\nmargin-left 5px;\nfont-weight: bolder;\ncolor:#fff;\n&:hover{\n    cursor:pointer;\n    color:#cccccc;\n}\n&:active{\n    color:#7a7a7a;\n}\n`;\n\ntype MatchParams = {\n    assetSeq: string\n}\n\n//style end\nconst ModInfo = (props: MatchParams) => {\n    const history = useHistory()\n    const user = useSelector((state: RootState) => state.member)\n    api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n    const assetSeq: string = props.assetSeq;\n\n    let [fileList, setFileList] = useState<Array<AssetFile>>();\n    let [title, setTitle] = useState<string>();\n    let [currentInputTag, setCurrentInputTag] = useState<string>('');\n    let [tags, setTags] = useState<Array<string>>([]);\n    let [categories, setCategories] = useState([]);\n    let [selectedCategory, setSelectedCategory] = useState<string>();\n    let [categoriesHavingChild, setCategoriesHavingChild] = useState<Array<string>>();\n    let [isTagDuplicated, setIsTagDuplicated] = useState<boolean>(false);\n    let [alertOpen, setAlertOpen] = useState<boolean>(false);\n    let [fileDeleteAlertOpen, setFileDeleteAlertOpen] = useState<boolean>(false)\n    let [deleteTargetFileIndex, setDeleteTargetFileIndex] = useState<number>();\n\n    let [assetInfo, setAssetInfo] = useState<Asset>();\n\n    useEffect(() => {\n        api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n        api.get(`/category/list`)\n            .then(response => {\n                setCategories(arrayToTree(response.data.result, { parentProperty: 'categoryParent', customID: 'categoryId' }))\n            })\n    }, [user])\n\n    useEffect(() => {\n        api.get(`/asset/${assetSeq}`)\n            .then(result => {\n                let data: Asset = result.data.result;\n                setAssetInfo(data);\n                setTitle(data.assetTitle);\n                setFileList(data.assetFiles);\n                if (data.tags)\n                    setTags(data.tags.split(','))\n                setSelectedCategory(data.assetCategory + '')\n            })\n    }, [assetSeq])\n\n    useEffect(() => {\n        let tempArray: Array<string> = [];\n        async function getParents(array: Array<TreeViews>) {\n            await array.map((node: TreeViews) => {\n                if (node.children) {\n                    tempArray.push(node.categoryId + '');\n                    getParents(node.children);\n                }\n            });\n            setCategoriesHavingChild(tempArray)\n        };\n        getParents(categories);\n    }, [categories])\n    interface TreeViews {\n        children?: TreeViews[];\n        categoryName: string;\n        categoryId: string;\n    }\n\n    interface CategoryProps {\n        category: TreeViews\n    }\n    type Asset = {\n        assetSeq: number,\n        assetOwner: string,\n        assetOwnerName: string,\n        assetChanger: string,\n        assetChangerName: string,\n        assetTitle: string,\n        assetCreateDate: Date,\n        assetUpdateDate: Date,\n        tags: string,\n        assetCategory: number,\n        assetCategoryName: string,\n        assetFiles: Array<AssetFile>,\n    }\n    type AssetFile = {\n        assetSeq: number,\n        assetLocation: string,\n        assetOriginName: string,\n        assetSize: number,\n        assetType: string,\n    }\n\n    const renderTrees = (nodes: TreeViews) => (\n        <TreeItem key={nodes.categoryId} nodeId={nodes.categoryId + ''} label={nodes.categoryName} classes={{ label: classes.label }}>\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTrees(node)) : null}\n        </TreeItem>\n    );\n\n    const Category = ({ category }: CategoryProps) => {\n        useEffect(() => {\n\n        }, [category]);\n        return renderTrees(category);\n    }\n\n    const handleToggle = (event: any, nodeIds: string[]) => {\n        event.preventDefault()\n    };\n    const handleNodeSelect = (event: any, nodeId: React.SetStateAction<string>) => {\n        setSelectedCategory(nodeId)\n    };\n\n    const handleCancel = () => {\n        history.goBack();\n    }\n\n    const handleAlertOpen = () => {\n        setAlertOpen(true)\n    }\n    const handleAlertClose = () => {\n        setAlertOpen(false)\n    }\n\n    const handleFileDeleteAlertClose = () => {\n        setFileDeleteAlertOpen(false);\n    }\n\n    const handleFileDeleteAlertOpen = (i: number) => () => {\n        setDeleteTargetFileIndex(i);\n        setFileDeleteAlertOpen(true)\n    }\n\n    const handleFileDelete = () => {\n        api.delete(`/file`,\n            {\n                params: {\n                    assetLocation: fileList[deleteTargetFileIndex].assetLocation\n                },\n                headers: {\n                    'Content-type': 'application/json',\n                }\n            }\n        ).then(result => {\n            let tempFileList = [...fileList]\n            tempFileList.splice(deleteTargetFileIndex, 1)\n            setFileList([...tempFileList]);\n            setDeleteTargetFileIndex(null)\n            setFileDeleteAlertOpen(false)\n        })\n    }\n\n    const addTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\" || e.key === \"Tab\") {\n            e.preventDefault();\n            let inputTag = currentInputTag.trim();\n            if (inputTag !== \"\") {\n                if (tags.filter(tag => tag.trim() === inputTag).length <= 0) {\n                    setIsTagDuplicated(false);\n                    api.post(`/tag`, null,\n                        { params: { assetTag: inputTag, assetSeq: assetSeq } }\n                    ).then(result => {\n                        if (result.data.result)\n                            setTags(result.data.result.split(','))\n                        else\n                            setTags([])\n                    })\n                } else {\n                    setIsTagDuplicated(true)\n                }\n            }\n            setCurrentInputTag('');\n        }\n    }\n\n    const removeTag = (targetTag: string) => {\n        api.delete(`/tag`,\n            { params: { assetTag: targetTag.trim(), assetSeq: assetSeq } }\n        ).then(result => {\n            if (result.data.result)\n                setTags(result.data.result.split(','))\n            else\n                setTags([])\n        })\n    }\n\n    const submitModify = (e: FormEvent) => {\n        e.preventDefault();\n        const data = {\n            assetSeq: assetSeq,\n            assetTitle: title,\n            assetCategory: selectedCategory\n        }\n        api.put(`/asset`,\n            data, {\n            headers: {\n                'Access-Control-Allow-Origin': '*'\n            }\n        }\n        ).then(result => {\n            history.goBack();\n        })\n    }\n\n    const useStyles = makeStyles({\n        root: {\n            height: 240,\n            flexGrow: 1,\n            maxWidth: 400,\n            display: 'contents',\n        },\n        label: {\n            textAlign: 'left'\n        },\n    });\n    const classes = useStyles();\n    return (\n        <>\n            {assetInfo &&\n                <DivWrapper>\n                    <DivContainer>\n                        <DivBox>\n                            <DivTitleContainer>\n                                <h2 className=\"h3 mb-2 text-gray-800\">수정</h2>\n                            </DivTitleContainer>\n                            <FormLogin>\n                                <DivInputGroup>\n                                    <SpanInputLabel>제목</SpanInputLabel>\n                                    <InputText type=\"text\" value={title} onChange={(e) => { setTitle(e.target.value) }} className=\"logininput\" />\n                                </DivInputGroup>\n\n                                <DivInputGroup>\n                                    <SpanInputLabel>카테고리</SpanInputLabel>\n                                    {categories.length > 0 ? (\n                                        <TreeView\n                                            onNodeToggle={handleToggle}\n                                            onNodeSelect={handleNodeSelect}\n                                            className={classes.root}\n                                            expanded={categoriesHavingChild}\n                                            defaultSelected={assetInfo.assetCategory + ''}\n                                        >\n                                            <div>\n                                                {categories.map((category: TreeViews) => {\n                                                    return <Category key={category.categoryId} category={category} />\n                                                })}\n                                            </div>\n                                        </TreeView>\n                                    ) :\n                                        (<CircularProgress />)\n                                    }\n                                </DivInputGroup>\n\n\n                                <DivInputGroup>\n                                    <SpanInputLabel>태그</SpanInputLabel>\n                                    <InputText type=\"text\" value={currentInputTag} onChange={(e) => { setCurrentInputTag(e.target.value) }} onKeyPress={(e) => { addTag(e) }} placeholder=\"태그 입력 후 엔터\" />\n                                </DivInputGroup>\n                                <DivTagGroup>\n                                    {\n                                        isTagDuplicated ?\n                                            <div style={{ color: 'red' }}>\n                                                중복된 태그입니다.\n                                    </div> : null\n                                    }\n\n                                    {tags.map((data, i) =>\n                                        <SpanTag key={i}>{data}<SpanTimes onClick={() => { removeTag(data) }}>×</SpanTimes></SpanTag>\n                                    )}\n                                </DivTagGroup>\n                                <DivInputGroup>\n                                    {fileList && <List >\n                                        {fileList.map((value, i) => {\n                                            const labelId = `checkbox-list-label-${i}`;\n                                            return (\n                                                <ListItem key={i} role={undefined} dense >\n\n                                                    <ListItemText id={labelId} primary={value.assetOriginName} />\n                                                    <ListItemSecondaryAction>\n                                                        <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleFileDeleteAlertOpen(i)}>\n                                                            <Delete />\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction>\n                                                </ListItem>\n                                            );\n                                        })}\n                                    </List>}\n                                </DivInputGroup>\n                                <DivTagGroup>\n                                    <Button color=\"primary\" onClick={submitModify}>저장</Button>\n                                    <Button color=\"secondary\" onClick={handleCancel}>취소</Button>\n                                </DivTagGroup>\n\n                            </FormLogin>\n                        </DivBox>\n                    </DivContainer>\n                </DivWrapper>\n            }\n            <Dialog\n                open={alertOpen}\n                onClose={handleAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"입력정보를 확인해주세요\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        (제목, 카테고리, 파일첨부는 필수요소 입니다.)\n          </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color=\"primary\">\n                        확인\n          </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={fileDeleteAlertOpen}\n                onClose={handleFileDeleteAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"파일을 삭제하시겠습니까?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        삭제된 파일은 복구할 수 없습니다.\n          </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleFileDelete} color=\"secondary\">\n                        확인\n          </Button>\n                    <Button onClick={handleFileDeleteAlertClose} color=\"primary\">\n                        취소\n          </Button>\n                </DialogActions>\n            </Dialog>\n\n        </>\n    )\n}\n\nexport default ModInfo;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/MemberManager/members.tsx",["115","116","117","118","119","120","121","122"],"import {\n    TableContainer, TableHead, Table, TableRow, TableBody, Card, CardHeader, Button, Paper, makeStyles, CardContent, createStyles, withStyles, Theme, TableCell, CardActions, Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    TextField,\n    CircularProgress,\n    IconButton,\n    InputBase,\n    Divider,\n    FormControl,\n    Select,\n    MenuItem,\n} from \"@material-ui/core\";\nimport { amber, red } from \"@material-ui/core/colors\";\nimport { Clear, Search } from \"@material-ui/icons\";\nimport { Pagination } from \"@material-ui/lab\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../modules\";\nimport api from \"../../../util/api\";\n\ntype MatchParams = {\n    pageNum: string\n}\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n    createStyles({\n        head: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        body: {\n            fontSize: 14,\n        },\n    }),\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n    }),\n)(TableRow);\n\nconst mailVali = RegExp(/^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i);\nconst phoneVali = RegExp(/^[0-9]{10,11}$/);\nconst idVali = RegExp(/^[a-zA-Z][a-zA-Z0-9_\\.\\-]{3,}$/);\n\n\ninterface InputData<T> {\n    data: T;\n    error: boolean;\n}\n\ntype MemberInfo = {\n    userId: string,\n    userPass: string,\n    userName: string,\n    userEmail: string,\n    userPhone: string,\n}\n\ntype Page = {\n    startPage: number,\n    endPage: number,\n    prev: false,\n    next: false,\n    total: number\n}\n\ninterface DeleteTarget {\n    userId: string,\n    count: number\n}\n// const Members = (props: MatchParams) => {\nconst Members = () => {\n    const [memberList, setMemberList] = useState<Array<MemberInfo>>();\n    const [pageNum, setPageNum] = useState<number>(1);\n    const [pageInfo, setPageInfo] = useState<Page>();\n    const [addOpen, setAddOpen] = useState<boolean>(false);\n    const [modOpen, setModOpen] = useState<boolean>(false);\n    const [addUserId, setAddUserId] = useState<InputData<string>>({ data: '', error: true })\n    const [addUserPassword, setAddUserPassword] = useState<InputData<string>>({ data: '', error: true })\n    const [addUserPasswordCheck, setAddUserPasswordCheck] = useState<InputData<string>>({ data: '', error: true })\n    const [addUsername, setAddUsername] = useState<InputData<string>>({ data: '', error: true })\n    const [addUserPhone, setAddUserPhone] = useState<InputData<string>>({ data: '', error: true })\n    const [addUserEmail, setAddUserEmail] = useState<InputData<string>>({ data: '', error: true })\n    const [idInvalidMessage, setIdInvalidMessage] = useState<string>('')\n    const [passwordInvalidMessage, setPasswordInvalidMessage] = useState<string>('')\n    const [passwordCheckInvalidMessage, setPasswordCheckInvalidMessage] = useState<string>('')\n    const [usernameInvalidMessage, setUsernameInvalidMessage] = useState<string>('')\n    const [userPhoneInvalidMessage, setUserPhoneInvalidMessage] = useState<string>('')\n    const [uesrEmailInvalidMessage, setUserEmailInvalidMessage] = useState<string>('')\n    const [totalValid, setTotalValid] = useState<boolean>(true)\n    const [deleteOpen, setDeleteOpen] = useState<boolean>(false)\n    const [deleteTarget, setDeleteTarget] = useState<DeleteTarget>()\n    const [searchCondition, setSearchCondition] = useState<string>('userId')\n    const [isSearch, setIsSearch] = useState<boolean>(false)\n    const [keyword, setKeyword] = useState<string>('');\n    const user = useSelector((state:RootState)=>state.member)\n    api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n\n    const handleAddOpen = () => {\n        setAddOpen(true)\n    }\n\n    const handleAddClose = () => {\n        setDataReset()\n        setAddOpen(false)\n    }\n\n    const handleAddConfirm = () => {\n        if (validCheck()) {\n            const data: MemberInfo = {\n                userId: addUserId.data,\n                userPass: addUserPassword.data,\n                userName: addUsername.data,\n                userEmail: addUserEmail.data,\n                userPhone: addUserPhone.data,\n            }\n            api.post(`/member/user`, data)\n                .then(response => {\n                    const data = response.data\n                    if (data.code === 200) {\n                        handleAddClose()\n                        loadMembers()\n                    }\n                })\n        } else {\n            setTotalValid(false)\n        }\n    }\n\n    const validCheck = () => {\n        const data = [\n            addUserId, addUserPassword, addUserPasswordCheck, addUsername, addUserPhone, addUserEmail\n        ]\n        let isCompletelyValid = true\n        if (addUserId.data && addUserPassword.data && addUserPasswordCheck.data && addUsername.data && addUserPhone.data && addUserEmail.data) {\n            for (let i = 0; i < data.length; i++) {\n                if (!data[i].error) {\n                    isCompletelyValid = false\n                    break;\n                }\n            }\n        } else { isCompletelyValid = false }\n        return isCompletelyValid\n    }\n\n    const setDataReset = () => {\n        const dataSet = [setAddUserId, setAddUserPassword, setAddUserPasswordCheck, setAddUsername, setAddUserPhone, setAddUserEmail]\n        dataSet.forEach(element => {\n            element({ data: '', error: true })\n        });\n        const messageSet = [\n            setIdInvalidMessage, setPasswordInvalidMessage, setPasswordCheckInvalidMessage, setUsernameInvalidMessage, setUserPhoneInvalidMessage, setUserEmailInvalidMessage\n        ]\n        messageSet.forEach(element => {\n            element('')\n        })\n        setTotalValid(true)\n    }\n\n    const handleAddInputId = (value: string) => {\n        idDupCheck(value)\n    }\n    function idDupCheck(value: string) {\n        if (idVali.test(value)) {\n            api.get(`/member/user?userId=${value}`)\n                .then(response => {\n                    if (response.data.result) {\n                        setAddUserId({ data: value, error: false })\n                        setIdInvalidMessage('사용할 수 없는 아이디입니다');\n                    } else {\n                        setAddUserId({ data: value, error: true })\n                        setIdInvalidMessage('');\n                    }\n                })\n        } else {\n            setIdInvalidMessage('아이디는 4글자 이상 영어 대소문자 및 숫자 조합');\n            setAddUserId({ data: value, error: false })\n        }\n    }\n\n    const handledAddPassword = (value: string) => {\n        if (value) {\n            setAddUserPassword({ data: value, error: true })\n            setPasswordInvalidMessage('')\n        } else {\n            setAddUserPassword({ data: value, error: false })\n            setPasswordInvalidMessage('비밀번호는 공백일 수 없습니다')\n        }\n\n    }\n\n    const handleAddPasswordCheck = (value: string) => {\n        if (value === addUserPassword.data) {\n            setAddUserPasswordCheck({ data: value, error: true })\n            setPasswordCheckInvalidMessage('')\n        }\n        else {\n            setAddUserPasswordCheck({ data: value, error: false })\n            setPasswordCheckInvalidMessage('비밀번호가 일치하지 않습니다')\n        }\n    }\n\n    const handledAddUsername = (value: string) => {\n        if (value) {\n            setAddUsername({ data: value, error: true })\n            setUsernameInvalidMessage('')\n        } else {\n            setAddUsername({ data: value, error: false })\n            setUsernameInvalidMessage('이름을 입력해주세요')\n        }\n    }\n    const handledAddUserPhone = (value: string) => {\n        if (!value) {\n            setAddUserPhone({ data: value, error: false })\n            setUserPhoneInvalidMessage('전화번호를 입력해주세요')\n        }\n        else if (phoneVali.test(value)) {\n            setAddUserPhone({ data: value, error: true })\n            setUserPhoneInvalidMessage('')\n        } else {\n            setAddUserPhone({ data: value, error: false })\n            setUserPhoneInvalidMessage('올바른 전화번호를 적어주세요 ex)01012345678')\n        }\n    }\n    const handledAddUserEmail = (value: string) => {\n        if (!value) {\n            setAddUserEmail({ data: value, error: false })\n            setUserEmailInvalidMessage('이메일을 입력해주세요.')\n        }\n        else if (mailVali.test(value)) {\n            setAddUserEmail({ data: value, error: true })\n            setUserEmailInvalidMessage('')\n        } else {\n            setAddUserEmail({ data: value, error: false })\n            setUserEmailInvalidMessage('올바른 형식을 사용해주세요')\n        }\n    }\n\n    const handleModifyClick = (user: MemberInfo) => {\n        setAddUserId({ data: user.userId, error: true })\n        setAddUsername({ data: user.userName, error: true })\n        setAddUserPhone({ data: user.userPhone, error: true })\n        setAddUserEmail({ data: user.userEmail, error: true })\n        setModOpen(true)\n    }\n\n    const handleModClose = () => {\n        setDataReset()\n        setModOpen(false)\n    }\n\n    const handledModPassword = (value: string) => {\n        if (value) {\n            setAddUserPassword({ data: value, error: true })\n        }\n    }\n    const modValidCheck = () => {\n        const data = [\n            addUserId, addUserPassword, addUserPasswordCheck, addUsername, addUserPhone, addUserEmail\n        ]\n        let isCompletelyValid = true\n        if (addUserId.data && addUsername.data && addUserPhone.data && addUserEmail.data) {\n            for (let i = 0; i < data.length; i++) {\n                if (!data[i].error) {\n                    isCompletelyValid = false\n                    break;\n                }\n            }\n        } else { isCompletelyValid = false }\n        return isCompletelyValid\n    }\n    const handleModConfirm = () => {\n        if (modValidCheck()) {\n            const data: MemberInfo = {\n                userId: addUserId.data,\n                userPass: addUserPassword.data,\n                userName: addUsername.data,\n                userEmail: addUserEmail.data,\n                userPhone: addUserPhone.data,\n            }\n            api.put(`/member/user`, data)\n                .then(response => {\n                    const data = response.data\n                    if (data.code === 200) {\n                        handleModClose()\n                        loadMembers()\n                    }\n                })\n        } else {\n            setTotalValid(false)\n        }\n    }\n    const handleDelete = (userId: string) => {\n        setDeleteOpen(true)\n        api.get(`/member/user/assetcount/${userId}`)\n            .then(response => {\n                setDeleteTarget({ userId: userId, count: response.data.result })\n            })\n    }\n\n    const handleDeleteClose = () => {\n        setDeleteTarget(null)\n        setDeleteOpen(false)\n    }\n    const handleDeleteConfirm = () => {\n        api.delete(`/member/user/${deleteTarget.userId}`)\n            .then(response => {\n                setDeleteTarget(null)\n                setDeleteOpen(false)\n                loadMembers()\n            })\n    }\n\n    const handleSearchCondition = (condition: string) => {\n        setSearchCondition(condition)\n    }\n\n    const searchInputKeyPress = async (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            setIsSearch(pre=>{let temp = true;return temp});\n            setPageNum(pre=>{let temp =1; return temp})\n            loadMembers();\n        }\n    }\n    const handlerSearchButtonClick = () => {\n        setIsSearch(pre=>{let temp = true;return temp});\n        setPageNum(pre=>{let temp = 1; return temp})\n        loadMembers();\n    }\n    \n    const setData = () => {\n        let data: string = ''\n        data += `condition=${searchCondition}&`\n        data += `keyword=${keyword}&`\n        data += `pageNum=${pageNum}`\n        return data\n    }\n    const handleSearchReset = () => {\n        setKeyword('')\n        setPageNum(1)\n        setIsSearch(pre=>{return false})\n        loadMembers();\n    }\n    async function loadMembers() {\n        api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n        let response\n        switch (isSearch) {\n            case true:\n                response = await api.get(`/member/search?${setData()}`)\n                break;\n            default:\n                response = await api.get(`/member/list/${pageNum}`)\n                break;\n        }\n        const list: Array<MemberInfo> = response.data.result\n        setPageInfo(response.data.reference)\n        setMemberList(list)\n    };\n    useEffect(()=>{\n        setPageNum(pre=>{let temp =1; return temp})\n        loadMembers();\n    },[isSearch])\n    useEffect(() => {\n        loadMembers();\n    }, [pageNum]);\n\n    const ModifyButton = withStyles((theme: Theme) => ({\n        root: {\n            color: theme.palette.getContrastText(amber[500]),\n            backgroundColor: amber[500],\n            '&:hover': {\n                backgroundColor: amber[700],\n            },\n        },\n    }))(Button);\n    const DeleteButton = withStyles((theme: Theme) => ({\n        root: {\n            color: theme.palette.getContrastText(red[900]),\n            backgroundColor: red[900],\n            '&:hover': {\n                backgroundColor: red[700],\n            },\n            marginLeft: 5\n        },\n    }))(Button);\n    const useStyles = makeStyles(() => ({\n        addButton: {\n            margin: \"auto\",\n        },\n        ul: {\n            justifyContent: 'center',\n            padding: 10,\n        },\n        dialogPaper: {\n            width: \"400px\",\n        },\n        dialogTextField: {\n            width: \"100%\",\n            height: \"90px\"\n        },\n        root: {\n            padding: '2px 4px',\n            display: 'flex',\n            alignItems: 'center',\n            width: 400,\n        },\n        input: {\n            flex: 1,\n            width: 250\n        },\n        iconButton: {\n            padding: 10,\n        },\n        divider: {\n            height: 28,\n            margin: 4,\n        },\n        formControl: {\n            margin: 1,\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: 2,\n        },\n    }))\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Paper>\n                <Card>\n                    <CardHeader classes={{ action: classes.addButton }}\n                        avatar={\n                            <div>\n                                <h2>회원 관리</h2>\n                            </div>\n                        }\n\n                        action={\n                            <Button variant=\"contained\" color=\"primary\" onClick={handleAddOpen}>\n                                회원 추가\n                    </Button>\n                        }\n                    />\n                    <CardContent>\n                        <Paper component=\"form\" elevation={2} style={{ margin: 3 }} className={classes.root}>\n                            <IconButton className={classes.iconButton} aria-label=\"menu\">\n                                <FormControl className={classes.formControl}>\n                                    <Select\n                                        value={searchCondition}\n                                        onChange={e => { handleSearchCondition(e.target.value as string) }}\n                                        displayEmpty\n                                        className={classes.selectEmpty}\n                                        inputProps={{ 'aria-label': 'Without label' }}\n                                    >\n                                        <MenuItem value=\"userId\">아이디</MenuItem>\n                                        <MenuItem value=\"userName\">이름</MenuItem>\n                                        <MenuItem value=\"userEmail\">이메일</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </IconButton>\n                            <Divider className={classes.divider} orientation=\"vertical\" />\n                            <InputBase\n                                className={classes.input}\n                                placeholder=\"검색\"\n                                onKeyPress={(e) => { searchInputKeyPress(e) }}\n                                onChange={(e) => { setKeyword(e.target.value) }}\n                                value={keyword}\n                            />\n                            {isSearch &&\n                                <IconButton onClick={handleSearchReset} aria-label=\"search\">\n                                    <Clear />\n                                </IconButton>}\n                            <IconButton onClick={handlerSearchButtonClick} className={classes.iconButton} aria-label=\"search\">\n                                <Search />\n                            </IconButton>\n\n                        </Paper>\n                        <TableContainer component={Paper}>\n                            <Table aria-label=\"customized table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <StyledTableCell>아이디</StyledTableCell>\n                                        <StyledTableCell align=\"right\">이름</StyledTableCell>\n                                        <StyledTableCell align=\"right\">이메일</StyledTableCell>\n                                        <StyledTableCell align=\"right\">전화번호</StyledTableCell>\n                                        <StyledTableCell align=\"right\">&nbsp;</StyledTableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {memberList && memberList.map((user) => (\n                                        <StyledTableRow key={user.userId}>\n                                            <StyledTableCell component=\"th\" scope=\"row\">\n                                                {user.userId}\n                                            </StyledTableCell>\n                                            <StyledTableCell align=\"right\">{user.userName}</StyledTableCell>\n                                            <StyledTableCell align=\"right\">{user.userEmail}</StyledTableCell>\n                                            <StyledTableCell align=\"right\">{user.userPhone}</StyledTableCell>\n                                            <StyledTableCell align=\"right\">\n                                                <ModifyButton onClick={e => { handleModifyClick(user) }} >수정</ModifyButton>\n                                                <DeleteButton onClick={e => { handleDelete(user.userId) }}>삭제</DeleteButton>\n                                            </StyledTableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <CardActions style={{ justifyContent: \"center\" }}>\n                            {pageInfo && <Pagination classes={{ ul: classes.ul }}\n                                hideNextButton={!pageInfo.next}\n                                hidePrevButton={!pageInfo.prev}\n                                count={pageInfo.endPage}\n                                page={pageNum}\n                                onChange={(e: React.ChangeEvent<unknown>, value: number) => { setPageNum(value) }}\n                                shape=\"rounded\" />}\n                        </CardActions>\n                    </CardContent>\n                </Card>\n            </Paper>\n\n            <Dialog\n                classes={{ paper: classes.dialogPaper }}\n                open={addOpen}\n                onClose={handleAddClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"회원등록\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <TextField\n                            required\n                            autoFocus\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserId.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"아이디\"\n                            value={addUserId.data}\n                            onChange={e => handleAddInputId(e.target.value)}\n                            onBlur={e => handleAddInputId(e.target.value)}\n                            helperText={idInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserPassword.error}\n                            autoComplete='off'\n                            type=\"password\"\n                            id=\"outlined-required\"\n                            label=\"비밀번호\"\n                            value={addUserPassword.data}\n                            onChange={e => handledAddPassword(e.target.value)}\n                            onBlur={e => handledAddPassword(e.target.value)}\n                            helperText={passwordInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserPasswordCheck.error}\n                            autoComplete='off'\n                            type=\"password\"\n                            id=\"outlined-required\"\n                            label=\"비밀번호 확인\"\n                            value={addUserPasswordCheck.data}\n                            onChange={e => handleAddPasswordCheck(e.target.value)}\n                            onBlur={e => handleAddPasswordCheck(e.target.value)}\n                            helperText={passwordCheckInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUsername.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"이름\"\n                            value={addUsername.data}\n                            onChange={e => handledAddUsername(e.target.value)}\n                            onBlur={e => handledAddUsername(e.target.value)}\n                            helperText={usernameInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserPhone.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"전화번호\"\n                            value={addUserPhone.data}\n                            onChange={e => handledAddUserPhone(e.target.value)}\n                            onBlur={e => handledAddUserPhone(e.target.value)}\n                            helperText={userPhoneInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserEmail.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"이메일\"\n                            value={addUserEmail.data}\n                            onChange={e => handledAddUserEmail(e.target.value)}\n                            onBlur={e => handledAddUserEmail(e.target.value)}\n                            helperText={uesrEmailInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        {\n                            <p style={{ color: 'red', justifyContent: 'center' }}>{totalValid ? '' : '작성내용을 확인해주세요'}</p>\n                        }\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleAddConfirm} color=\"primary\">\n                        확인\n                    </Button>\n                    <Button variant=\"contained\" onClick={handleAddClose} color=\"secondary\">\n                        취소\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog\n                classes={{ paper: classes.dialogPaper }}\n                open={modOpen}\n                onClose={handleModClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"회원수정\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <TextField\n                            disabled\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserId.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"아이디\"\n                            value={addUserId.data}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserPassword.error}\n                            autoComplete='off'\n                            type=\"password\"\n                            id=\"outlined-required\"\n                            label=\"비밀번호\"\n                            value={addUserPassword.data}\n                            onChange={e => handledModPassword(e.target.value)}\n                            onBlur={e => handledAddPassword(e.target.value)}\n                            helperText={passwordInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserPasswordCheck.error}\n                            autoComplete='off'\n                            type=\"password\"\n                            id=\"outlined-required\"\n                            label=\"비밀번호 확인\"\n                            value={addUserPasswordCheck.data}\n                            onChange={e => handleAddPasswordCheck(e.target.value)}\n                            onBlur={e => handleAddPasswordCheck(e.target.value)}\n                            helperText={passwordCheckInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUsername.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"이름\"\n                            value={addUsername.data}\n                            onChange={e => handledAddUsername(e.target.value)}\n                            onBlur={e => handledAddUsername(e.target.value)}\n                            helperText={usernameInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserPhone.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"전화번호\"\n                            value={addUserPhone.data}\n                            onChange={e => handledAddUserPhone(e.target.value)}\n                            onBlur={e => handledAddUserPhone(e.target.value)}\n                            helperText={userPhoneInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            classes={{ root: classes.dialogTextField }}\n                            error={!addUserEmail.error}\n                            autoComplete='off'\n                            id=\"outlined-required\"\n                            label=\"이메일\"\n                            value={addUserEmail.data}\n                            onChange={e => handledAddUserEmail(e.target.value)}\n                            onBlur={e => handledAddUserEmail(e.target.value)}\n                            helperText={uesrEmailInvalidMessage}\n                            variant=\"outlined\"\n                        />\n                    </DialogContentText>\n                    {\n\n                    }\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleModConfirm} color=\"primary\">\n                        확인\n                    </Button>\n                    <Button variant=\"contained\" onClick={handleModClose} color=\"secondary\">\n                        취소\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={deleteOpen}\n                onClose={handleDeleteClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"회원 삭제\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {deleteTarget ?\n                            deleteTarget.count ?\n                                `해당 회원은 ${deleteTarget.count}개의 게시물이 있어 삭제할수없습니다.` :\n                                `${deleteTarget.userId} 회원을 삭제하시겠습니까?`\n                            :\n                            <CircularProgress />\n                        }\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    {deleteTarget ? !deleteTarget.count && <DeleteButton onClick={handleDeleteConfirm}>\n                        삭제\n                    </DeleteButton> : null}\n                    <Button onClick={handleDeleteClose} color=\"primary\" autoFocus>\n                        취소\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n\n    )\n}\nexport default Members","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SideHeader.tsx",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/index.tsx",[],["138","139"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/Upload.tsx",["140","141","142","143","144","145","146","147","148","149","150","151"],"import React, { useState, FormEvent, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport DropZone from './DropZone';\nimport { useHistory } from 'react-router';\nimport arrayToTree from 'array-to-tree';\nimport { ExpandMore, ChevronRight } from '@material-ui/icons'\nimport { Avatar, Box, Button, CircularProgress, colors, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, LinearProgress, List, ListItem, ListItemAvatar, ListItemText, makeStyles, Typography } from '@material-ui/core';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\nimport api from '../../util/api';\n//style \n\nlet DivWrapper = styled.div`\nwidth:100%;\nmargin: 0 auto;\npadding: 0px;\njustify-content: center;\nalign-items: center;\nbox-sizing: border-box;\n`;\n\nlet DivContainer = styled.div`\nwidth: 100%;\nmin-height: 100vh;\ndisplay:block;\n//flex-wrap: wrap;\nmargin-right: auto;\nmargin-left: auto;\npadding-left: 15px;\npadding-right: 15px;\npadding-top: 15px;\n// justify-content: center;\n// align-items: center;\n// padding: 15px;\nbackground: #ebeeef;\n`;\n\nlet DivTitleContainer = styled.div`\n// width:100%;\ndisplay:flex;\nmargin-bottom: 20px;\nborder-bottom: 1px solid #eaeaea;\n`;\n\nlet DivBox = styled.div`\nmax-width: 80%;\n// min-width: 670px;\nmargin: auto;\nbackground: #fff;\n// padding:10px;\n// overflow: hidden;\nposition: relative;\npadding: 20px;\nborder-radius: 3px;\nbox-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px;\n`;\n\nconst DivInputGroup = styled.div`\nwidth: 100%;\n  position: relative;\n  border-bottom: 1px solid #b2b2b2;\n  margin-bottom: 26px;\n`;\n\nconst DivTagGroup = styled.div`\nwidth:100%;\nposition:relative;\nmargin-bottom:26px;\ndisplay:block;\n`;\n\nconst SpanInputLabel = styled.span`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #808080;\n  line-height: 1.2;\n  text-align: right;\n  position: absolute;\n  top: 14px;\n  left: -105px;\n  width: 80px;\n`;\nconst InputText = styled.input`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #555555;\n  line-height: 1.2;\n  height: 45px;\n  display: block;\n  width: 100%;\n  background: transparent;\n  padding: 0 5px;\n  outline:none;\n  border:none;\n`;\nconst FormLogin = styled.form`\nwidth: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 43px 88px 93px 150px;\n`;\n\nconst SpanTag = styled.span`\ndisplay:inline-block;\nbackground:#4abdff;\nmargin-right:5px;\nmargin-top:2px;\nmargin-bottom:2px;\npadding:5px 7px 5px 7px;\nborder-radius:4px;\ncolor:#fff;\n`;\n\nconst SpanTimes = styled.span`\nmargin: 3px;\nmargin-left 5px;\nfont-weight: bolder;\ncolor:#fff;\n&:hover{\n    cursor:pointer;\n    color:#cccccc;\n}\n&:active{\n    color:#7a7a7a;\n}\n`;\n\n\n//style end\nconst Upload = () => {\n    const history = useHistory()\n    const user = useSelector((state: RootState) => state.member)\n    api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n    let [title, setTitle] = useState<string>();\n    let [currentInputTag, setCurrentInputTag] = useState<string>('');\n    let [tags, setTags] = useState<Array<string>>([]);\n    let [filesState, setFilesState] = useState<Array<File>>([]);\n    let [categories, setCategories] = useState([]);\n    let [selectedCategory, setSelectedCategory] = useState<string>();\n    let [categoriesHavingChild, setCategoriesHavingChild] = useState<Array<string>>();\n    let [isTagDuplicated, setIsTagDuplicated] = useState<boolean>(false);\n    let [alertOpen, setAlertOpen] = useState<boolean>(false);\n    let [uploadOpen, setUploadOpen] = useState<boolean>(false);\n    let [progresses, setProgresses] = useState<Array<number>>([0]);\n    let [newProgresses, setNewProgresses] = useState<Array<number>>([0]);\n    const CHUNK_SIZE: number = 1024 * 1024 * 10;//10MB\n    let temp: number[]\n\n    useEffect(() => {\n        api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n        api.get(`/category/list`)\n            .then(response => {\n                setCategories(arrayToTree(response.data.result, { parentProperty: 'categoryParent', customID: 'categoryId' }))\n            })\n    }, [user])\n    useEffect(() => {\n        let tempArray: Array<string> = [];\n        async function getParents(array: Array<TreeViews>) {\n            await array.map((node: TreeViews) => {\n                if (node.children) {\n                    tempArray.push(node.categoryId + '');\n                    getParents(node.children);\n                }\n            });\n            setCategoriesHavingChild(tempArray)\n        };\n        getParents(categories);\n    }, [categories])\n\n    useEffect(() => {\n        setProgresses(pre => {\n            return new Array(filesState.length).fill(0)\n        })\n        setNewProgresses(pre => {\n            return new Array(filesState.length).fill(0)\n        })\n    }, [filesState])\n\n    interface TreeViews {\n        children?: TreeViews[];\n        categoryName: string;\n        categoryId: string;\n    }\n    interface CategoryProps {\n        category: TreeViews\n    }\n\n    const renderTrees = (nodes: TreeViews) => (\n        <TreeItem key={nodes.categoryId} nodeId={nodes.categoryId + ''} label={nodes.categoryName} classes={{ label: classes.label }}>\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTrees(node)) : null}\n        </TreeItem>\n    );\n\n    const Category = ({ category }: CategoryProps) => {\n        useEffect(() => {\n\n        }, [category]);\n        return renderTrees(category);\n    }\n\n    const handleToggle = (event: any, nodeIds: string[]) => {\n        event.preventDefault()\n    };\n    const handleNodeSelect = (event: any, nodeId: React.SetStateAction<string>) => {\n        setSelectedCategory(nodeId)\n    };\n\n    const handleAlertOpen = () => {\n        setAlertOpen(true)\n    }\n    const handleAlertClose = () => {\n        setAlertOpen(false)\n    }\n    const handlerUploadOpen = () => {\n        setUploadOpen(true);\n    }\n    const handlerUploadClose = () => {\n        setUploadOpen(false);\n    }\n    const fileUpload = (seq: number) => {\n        handlerUploadOpen();\n\n        (async function () {\n            for (let index = 0; index < filesState.length; index++) {\n                if (filesState[index].size > CHUNK_SIZE) {\n                    const chunks = fileSlicer(filesState[index])\n                    let data = {\n                        \"assetSeq\": seq,\n                        \"assetOriginName\": filesState[index].name,\n                        \"assetSize\": filesState[index].size,\n                        \"assetUuidName\": '',\n                        \"isLastChunk\": false,\n                        \"location\": '',\n                        \"assetType\": filesState[index].type,\n                        \"category\": selectedCategory\n                    }\n                    const result = await api.post(`/prelargefile`,\n                        data\n                    )\n                    data[\"assetUuidName\"] = result.data.result.assetUuidName;\n                    data[\"location\"] = result.data.result.location;\n                    for (let i = 0; i < chunks.length; i++) {\n                        if ((i + 1) === chunks.length) {\n                            data[\"isLastChunk\"] = true;\n                        }\n                        try {\n                            setProgresses(pre => { pre[index] = Math.round(100 / chunks.length * i); return pre })\n                            setNewProgresses([...progresses])\n                            const result = await api.post(`/largefile`,\n                                chunks[i],\n                                {\n                                    params: data,\n                                    headers: { 'Content-Type': 'multipart/form-data' }\n                                }\n                            )\n                        } catch (err) {\n                            console.log(err);\n                        }\n                    }\n                } else {\n                    try {\n                        const formData = new FormData();\n                        formData.append(\"file\", filesState[index]);\n                        formData.append(\"assetSeq\", '' + seq);\n                        formData.append(\"assetType\", filesState[index].type);\n                        formData.append(\"category\", selectedCategory)\n                        await api.post(`/file`,\n                            formData,\n                            {\n                                onUploadProgress: ProgressEvent => {\n                                    const percentage = Math.round(\n                                        ProgressEvent.loaded * 100 / ProgressEvent.total\n                                    )\n                                    setProgresses(pre => { pre[index] = percentage; return pre })\n                                    setNewProgresses([...progresses])\n                                }\n                            }\n                        )\n\n                    }\n                    catch (err) {\n\n                    }\n                }\n                if (index === filesState.length - 1) {\n                    await fileUploadComplete(seq)\n                }\n            }\n            // }\n        })();\n    }\n   \n    const fileUploadComplete = async (seq: number) => {\n        try {\n            await api.post(`/complete`,\n                { assetSeq: seq, tags: tags.toString() },\n                {\n                    headers: {\n                        'Content-type': 'application/json',\n                        'Access-Control-Allow-Origin': '*'\n                    }\n                })\n            setFilesState([]);\n\n            history.push('/')\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n\n    const submitFiles = async (e: FormEvent) => {\n        e.preventDefault();\n        if (filesState.length != 0 && title && selectedCategory) {\n            let data = { assetTitle: title, assetCategory: selectedCategory }\n            try {\n                const response = await api.post(`/asset`,\n                    data,\n                    {\n                        headers: {\n                            'Content-type': 'application/json',\n                            'Access-Control-Allow-Origin': '*'\n                        }\n                    });\n                // setAssetSeq();\n\n                fileUpload(response.data.result.assetSeq);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        } else {\n            handleAlertOpen();\n        }\n    }\n\n    const addTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\" || e.key === \"Tab\") {\n            e.preventDefault();\n            let inputTag = currentInputTag.trim();\n            if (inputTag !== \"\") {\n                if (tags.filter(tag => tag === inputTag).length <= 0) {\n                    setIsTagDuplicated(false);\n                    let tmp: Array<string> = [...tags].concat(currentInputTag);\n                    setTags(tmp);\n                } else {\n                    setIsTagDuplicated(true)\n                }\n            }\n            setCurrentInputTag('');\n        }\n    }\n\n    const removeTag = (targetTag: string) => {\n        const targetTagIndex = tags.findIndex(e => e === targetTag);\n        tags.splice(targetTagIndex, 1);\n        setTags([...tags]);\n    }\n\n    // 파일을 청크로 나누는 함수\n    const fileSlicer = (target: File) => {\n        let chunks = [];\n        let chunkIndex = 0; // 파일 자를 시작 위치\n        const CHUNK_COUNT = Math.ceil(target.size / CHUNK_SIZE);//청크갯수\n        for (let i = 1; i <= CHUNK_COUNT; i++) {\n            if (i === CHUNK_COUNT)\n                chunks.push(target.slice(chunkIndex))\n            else\n                chunks.push(target.slice(chunkIndex, chunkIndex + CHUNK_SIZE))\n            chunkIndex += CHUNK_SIZE;\n        }\n        return chunks\n    }\n    const useStyles = makeStyles({\n        root: {\n            height: 240,\n            flexGrow: 1,\n            maxWidth: 400,\n            display: 'contents',\n        },\n        label: {\n            textAlign: 'left'\n        },\n    });\n    const classes = useStyles();\n    return (\n        <>\n\n            <DivWrapper>\n                <DivContainer>\n                    <DivBox>\n                        <DivTitleContainer>\n                            <h2 className=\"h3 mb-2 text-gray-800\">업로드</h2>\n                        </DivTitleContainer>\n                        <FormLogin\n                        // onSubmit={submitFiles}\n                        >\n                            <DivInputGroup>\n                                <SpanInputLabel>제목</SpanInputLabel>\n                                <InputText type=\"text\" value={title} onChange={(e) => { setTitle(e.target.value) }} className=\"logininput\" />\n                            </DivInputGroup>\n\n                            <DivInputGroup>\n                                <SpanInputLabel>카테고리</SpanInputLabel>\n                                {categories.length > 0 ? (\n                                    <TreeView\n                                        onNodeToggle={handleToggle}\n                                        onNodeSelect={handleNodeSelect}\n                                        className={classes.root}\n                                        // defaultCollapseIcon={<ExpandMore />}\n                                        // defaultExpandIcon={<ChevronRight />}\n                                        expanded={categoriesHavingChild}\n                                    >\n                                        <div>\n                                            {categories.map((category: TreeViews) => {\n                                                return <Category key={category.categoryId} category={category} />\n                                            })}\n                                        </div>\n                                    </TreeView>\n                                ) :\n                                    (<CircularProgress />)\n                                }\n                            </DivInputGroup>\n\n\n                            <DivInputGroup>\n                                <SpanInputLabel>태그</SpanInputLabel>\n                                <InputText type=\"text\" value={currentInputTag} onChange={(e) => { setCurrentInputTag(e.target.value) }} onKeyPress={(e) => { addTag(e) }} placeholder=\"태그 입력 후 엔터\" />\n                            </DivInputGroup>\n                            <DivTagGroup>\n                                {\n                                    isTagDuplicated ?\n                                        <div style={{ color: 'red' }}>\n                                            중복된 태그입니다.\n                                    </div> : null\n                                }\n\n                                {tags.map((data, i) =>\n                                    <SpanTag key={i}>{data}<SpanTimes onClick={() => { removeTag(data) }}>×</SpanTimes></SpanTag>\n                                )}\n                            </DivTagGroup>\n                            <DivInputGroup>\n                                <DropZone filesState={filesState} setFilesState={setFilesState} />\n                            </DivInputGroup>\n                            <DivTagGroup>\n                                <Button size=\"large\" color=\"primary\" onClick={submitFiles}>저장</Button>\n                            </DivTagGroup>\n\n                        </FormLogin>\n                    </DivBox>\n                </DivContainer>\n            </DivWrapper>\n\n            <Dialog\n                open={alertOpen}\n                onClose={handleAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"입력정보를 확인해주세요\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        (제목, 카테고리, 파일첨부는 필수요소 입니다.)\n          </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color=\"primary\">\n                        확인\n          </Button>\n                </DialogActions>\n            </Dialog>\n\n\n            <Dialog\n                open={uploadOpen}\n                // onClose={handlerUploadClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"업로드\"}</DialogTitle>\n                <DialogContent>\n                    <List className={classes.root}>\n                        {filesState.map((file, mapIndex) =>\n                            <ListItem alignItems=\"flex-start\">\n                                <ListItemText\n                                    primary={file.name}\n                                    secondary={\n                                        <React.Fragment>\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                <Box width=\"100%\" mr={1}>\n                                                    <LinearProgress variant=\"determinate\" value={newProgresses[mapIndex]} />\n                                                </Box>\n                                                <Box minWidth={35}>\n                                                    <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(newProgresses[mapIndex])}%`}</Typography>\n                                                </Box>\n                                            </Box>\n                                        </React.Fragment>\n                                    }\n                                />\n                            </ListItem>\n                        )}\n\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handlerUploadClose} color=\"primary\">\n                        창닫기\n                     </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default Upload;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/index.tsx",[],["152","153"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/index.tsx",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/MemberManager/index.tsx",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SearchWindow.tsx",["154","155","156","157","158","159","160","161","162"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/member.ts",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/index.tsx",["163","164","165","166","167","168"],"import React, { useEffect, useState } from 'react';\nimport Login from './login/Login';\nimport { connect, Provider, useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { RootState } from '../modules';\nimport { login } from '../modules/member';\nimport Upload from './upload/Upload';\nimport Header from './commons/Header';\nimport Main from './main';\nimport Detail from './detail';\nimport Modify from './modify';\nimport Drawer from './commons/SideHeader';\nimport SideHeader from './commons/SideHeader';\nimport MemberManager from './admin/MemberManager';\nimport CategoryManager from './admin/CategoryManager';\nfunction parseJwt(token: string) {\n    var base64Url = token.split('.')[1];\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n  };\nconst Pages = (props: any) => {\n    const user = useSelector((state: RootState) => state.member)\n    const dispatch = useDispatch();\n    const [isAdminLogined, setIsAdminLogined] = useState(false)\n    let token = sessionStorage.getItem('current_user_token')\n    useEffect(() => {\n        if (token && !user.isLogined) {\n            token = sessionStorage.getItem('current_user_token')\n            dispatch(login({ userId: '',userRole: parseJwt(token).userRole,token:token , isLogined: true }));\n        }\n    }, [user])\n    return !user.isLogined ? (\n        <Login />\n    ) : (\n\n            <BrowserRouter>\n                <SideHeader>\n                    <Route exact path=\"/\" component={Main} />\n                    <Route path=\"/upload\" component={Upload} />\n                    <Route path=\"/detail/:assetSeq\" component={Detail} />\n                    <Route path=\"/modify/:assetSeq\" component={Modify} />\n                    { user.userRole === \"ROLE_ADMIN\" && <>\n                        <Route path=\"/admin/member\" component={MemberManager} />\n                        <Route path=\"/admin/category\" component={CategoryManager}/>\n                    </>}\n                </SideHeader>\n            </BrowserRouter>\n        )\n}\n\nconst member = (state: any) => ({\n    user: state.member\n})\n\nexport default connect(member)(Pages);","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/index.tsx",["169"],"import Posts from \"./Posts\"\nimport Sidebar from \"../commons/Sidebar\"\nimport { RouteComponentProps } from \"react-router-dom\"\n\ntype MatchParams = {\n    pageNum: string\n}\n\nconst Main = ({ match }: RouteComponentProps<MatchParams>) => {\n    const {pageNum} = match.params\n    return (\n        <div>\n                <Posts pageNum={pageNum}/>\n        </div>\n    )\n}\n\nexport default Main;",["170","171"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/Info.tsx",["172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"import {\n    CardContent,\n    CardMedia,\n    Divider,\n    Grid,\n    Paper,\n    Collapse,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    makeStyles,\n    GridList,\n    GridListTile,\n    GridListTileBar,\n    Table,\n    TableRow,\n    TableCell,\n    Checkbox,\n    ListItemSecondaryAction,\n    IconButton,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    CircularProgress,\n} from \"@material-ui/core\"\nimport { StarBorder, ExpandLess, ExpandMore, Comment, GetApp } from \"@material-ui/icons\"\n// import { InboxIcon } from '@material-ui/icons/MoveToInbox';\nimport React, { useEffect, useState } from \"react\"\nimport Carousel from \"react-material-ui-carousel\"\nimport axios from \"axios\";\nimport moment from 'moment';\nimport { useHistory } from \"react-router\";\nimport { saveAs } from 'file-saver';\nimport JSZip from \"jszip\";\nimport { promises } from \"fs\";\nimport fileDownload from \"js-file-download\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../modules\";\nimport api, { BASE_API_URL } from \"../../util/api\";\n\nconst useStyles = makeStyles(() =>\n({\n    primary: {\n        fontSize: '20px',\n        textAlign: 'center'\n    },\n    nested: {\n        paddingLeft: 4,\n    },\n}),\n);\n\ntype Asset = {\n    assetSeq: number,\n    assetOwner: string,\n    assetOwnerName: string,\n    assetChanger: string,\n    assetChangerName: string,\n    assetTitle: string,\n    assetCreateDate: Date,\n    assetUpdateDate: Date,\n    tags: string,\n    assetCategory: number,\n    assetCategoryName: string,\n    assetFiles: Array<AssetFile>,\n}\ntype AssetFile = {\n    assetSeq: number,\n    assetLocation: string,\n    assetOriginName: string,\n    assetSize: number,\n    assetType: string,\n}\n\ntype MatchParams = {\n    assetSeq: string\n}\n\ntype Category = {\n    categoryId: number,\n    categoryName: string,\n    categoryParent: number,\n    categoryOrder: number\n}\n\nfunction parseJwt(token: string) {\n    var base64Url = token.split('.')[1];\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n  \n    return JSON.parse(jsonPayload);\n  };\n\nconst Info = (props: MatchParams) => {\n    const history = useHistory();\n    const assetSeq: string = props.assetSeq;\n    const classes = useStyles();\n    const [isOpen, setIsOpen] = useState(true);\n    const [assetInfo, setAssetInfo] = useState<Asset>();\n    const [parentCategory, setParentCategory] = useState<string>();\n    const [checked, setChecked] = useState<Array<string>>([]);\n    const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n    const [downloadOpen, setDownloadOpen] = useState<boolean>(false)\n    const [alertOpen, setAlertOpen] = useState<boolean>(false)\n    const [alertMessage, setAlertMessage] = useState<string>('')\n    const user=useSelector((state:RootState)=>state.member);\n    api.defaults.headers.common['Authorization'] = 'Bearer ' + user.token;\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    };\n\n\n\n    useEffect(() => {\n        api.get(`/asset/${assetSeq}`\n        ).then(result => {\n            setAssetInfo(result.data.result);\n            api.get(`/category/list`)\n                .then(response => {\n                    setParentCategory(findParent(result.data.result.assetCategory, response.data.result))\n                })\n        })\n    }, [assetSeq])\n\n    const findParent = (target: number, categories: Category[]) => {\n        let pStr = \"\";\n        categories.forEach(element => {\n            if (element.categoryId == target) {\n                if (element.categoryParent != 0) {\n                    pStr = findParent(element.categoryParent, categories) + '>' + element.categoryName\n                    return\n                } else {\n                    pStr = element.categoryName\n                    return\n                }\n            }\n        });\n        return pStr;\n    }\n\n    const handleToggle = (value: string) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n        setChecked(newChecked);\n    };\n\n    const goModify = () => {\n        history.push(`/modify/${assetSeq}`)\n    }\n\n    const handleDeleteOpen = () => {\n        setDeleteOpen(true)\n    }\n\n    const handleDeleteClose = () => {\n        setDeleteOpen(false)\n    }\n    const handleAlertOpen = () => {\n        setAlertOpen(true)\n    }\n\n    const handleAlertClose = () => {\n        setAlertOpen(false)\n    }\n\n    const handleDeleteConfirm = () => {\n        api.delete(`/asset/${assetSeq}`,\n            {\n                params: {\n                    assetOwner: assetInfo.assetOwner\n                }\n            }\n        )\n            .then(response => {\n                const data = response.data;\n                if(data.code === 403){\n                    setDeleteOpen(false)\n                    setAlertMessage(data.result)\n                    setAlertOpen(true)\n                }else{\n                    history.push(\"/\");\n                }\n            })\n    }\n\n    const handleSingleDownload = (fileLocation: string, fileOriginName: string) => () => {\n        api.get(`/download`, {\n            responseType: 'blob',\n            params:{\n                fileLocation\n            }\n        })\n            .then(response => {\n                fileDownload(response.data, fileOriginName);\n            })\n    }\n\n    const handleDownloadClose = () =>{\n        setDownloadOpen(false)\n    }\n\n    const handleMultiDownloadAsZip = () => {\n        const makeZip = new Promise(async (resolve, reject) => {\n            let zip = new JSZip();\n            setDownloadOpen(true)\n            \n            for (let i = 0; i < checked.length; i++) {\n                let fileInfo = checked[i].split(',')\n                await api.get(`${fileInfo[0]}`,\n                    {\n                        responseType: 'blob',\n                        // onDownloadProgress:ProgressEvent=>{\n                        //     const percentage=Math.round(\n                        //         ProgressEvent.loaded*100/ProgressEvent.total\n                        //     )\n                        //     setProgress(percentage);\n                        //     setWholeProgress(progress/checked.length)\n                        // }\n                    })\n                    .then(response => {\n                        zip.file(fileInfo[1],response.data);\n                    })\n            }\n            resolve(zip)\n        });\n        makeZip.then((value:any)=>{\n            value.generateAsync({ type: \"blob\" })\n            .then(function (content:any) {\n                // see FileSaver.js\n                saveAs(content, assetInfo.assetTitle + \".zip\");\n                setDownloadOpen(false)\n            })\n        })\n    }\n    return (\n        <div style={{ marginTop: 20, padding: 30 }}>\n            {assetInfo &&\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <Carousel\n                            autoPlay={false}\n                            animation={\"slide\"}\n                            indicators={true}\n                            navButtonsAlwaysVisible={true}\n                        >\n                            {assetInfo && assetInfo.assetFiles.map((item, i) => (\n                                <Grid item>\n                                    <CardContent>\n                                        <CardMedia>\n                                            {!item.assetType ?\n                                                <div>\n                                                    <img src={BASE_API_URL.substring(0,BASE_API_URL.lastIndexOf('/api'))+\"/images/unsupportedFile.png\"} alt=\"\" />\n                                                    <GridListTileBar title={\"미리보기가 지원되지 않는 형식\"} />\n                                                </div>\n                                                :\n                                                item.assetType.includes(\"image\") ?\n                                                    <img style={{ maxWidth: '600px',maxHeight:'600px' }} src={BASE_API_URL.substring(0,BASE_API_URL.lastIndexOf('/api'))+item.assetLocation.substring(item.assetLocation.lastIndexOf(\"/uploadedImages\"))} alt=\"\" />\n                                                    : item.assetType.includes(\"video\") ?\n                                                        <video style={{ maxWidth: '600px',maxHeight:'600px' }} controls src={BASE_API_URL.substring(0,BASE_API_URL.lastIndexOf('/api'))+item.assetLocation.substring(item.assetLocation.lastIndexOf(\"/uploadedImages\"))} />\n                                                        :\n                                                        item.assetType.includes(\"audio\") ?\n                                                            <audio controls src={BASE_API_URL.substring(0,BASE_API_URL.lastIndexOf('/api'))+item.assetLocation.substring(item.assetLocation.lastIndexOf(\"/uploadedImages\"))} />\n                                                            : <div>\n                                                                <img src={BASE_API_URL.substring(0,BASE_API_URL.lastIndexOf('/api'))+\"/images/unsupportedFile.png\"} alt=\"\" />\n                                                                <GridListTileBar title={\"미리보기가 지원되지 않는 형식\"} />\n                                                            </div>\n                                            }\n\n                                        </CardMedia>\n                                    </CardContent>\n                                </Grid>\n                            ))}\n                        </Carousel>\n                    </Grid>\n                    <Divider orientation=\"vertical\" flexItem />\n                    <Grid item xs={3}>\n                        <h1>{assetInfo.assetTitle}</h1>\n                        <Table aria-label=\"simple table\">\n                            <TableRow>\n                                <TableCell align=\"right\" style={{ color: \"grey\" }}>등록일 : {moment(assetInfo.assetCreateDate).format('YYYY-MM-DD HH:mm:ss')}\n                                    {assetInfo.assetCreateDate !== assetInfo.assetUpdateDate ? <><br />수정일 : {moment(assetInfo.assetUpdateDate).format('YYYY-MM-DD HH:mm:ss')}</> : null}</TableCell>\n\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>작성자 : {assetInfo.assetOwnerName}{assetInfo.assetChanger && <><br />최종 수정자 : {assetInfo.assetChangerName}</>}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    카테고리 : {parentCategory}\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    태그 : {assetInfo.tags}\n                                </TableCell>\n                            </TableRow>\n                        </Table>\n                        <Button onClick={goModify} color=\"primary\">수정</Button>\n                        {(user.userRole===\"ROLE_ADMIN\" || user.userId === assetInfo.assetOwner) && <Button onClick={handleDeleteOpen} color=\"secondary\">삭제</Button>}\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Divider />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ListItem button onClick={handleClick}>\n                            <ListItemText primary=\"파일 리스트\" classes={{ primary: classes.primary }} />\n                            {isOpen ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding>\n                                {/* <ListItem key=\"download\" role=\"selected-download\" style={{ height: 42, textAlign: 'center' }}>\n                                    <ListItemText>\n                                        <Button endIcon={<GetApp />} size=\"large\" onClick={handleMultiDownloadAsZip}>선택파일 다운로드</Button>\n                                    </ListItemText>\n                                </ListItem> */}\n                                {assetInfo.assetFiles.map((file, i) => {\n                                    const labelId = `checkbox-list-label-${i}`;\n                                    const fileLocation = file.assetLocation.substring(file.assetLocation.lastIndexOf(\"/uploadedImages\"));\n                                    return (\n                                        <ListItem key={i} role={undefined} dense button onClick={handleToggle(`${fileLocation},${file.assetOriginName}`)}>\n                                            {/* <ListItemIcon>\n                                                <Checkbox\n                                                    edge=\"start\"\n                                                    checked={checked.indexOf(`${fileLocation},${file.assetOriginName}`) !== -1}\n                                                    tabIndex={-1}\n                                                    disableRipple\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                /> \n                                            </ListItemIcon> */}\n                                            <ListItemText id={labelId} primary={`${file.assetOriginName}`} />\n                                            <ListItemSecondaryAction>\n                                                <IconButton edge=\"end\" aria-label=\"comments\" onClick={handleSingleDownload(file.assetLocation, file.assetOriginName)}>\n                                                    <GetApp />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    );\n                                })}\n                            </List>\n                        </Collapse>\n                    </Grid>\n                </Grid>\n\n            }\n            <Dialog\n                open={deleteOpen}\n                onClose={handleDeleteClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"삭제하시겠습니까?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        삭제된 게시글은 복구되지 않습니다.\n                     </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDeleteConfirm} color=\"secondary\">\n                        확인\n                    </Button>\n                    <Button onClick={handleDeleteClose} color=\"primary\">\n                        취소\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={downloadOpen}\n                onClose={handleDownloadClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"다운로드를 준비중입니다.\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\" style={{textAlign:'center'}}>\n                         <CircularProgress />\n                     </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDownloadClose} color=\"secondary\">\n                        확인\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={alertOpen}\n                onClose={handleAlertOpen}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{alertMessage}</DialogTitle>\n               \n                <DialogActions>\n                    <Button onClick={handleAlertClose} color=\"secondary\">\n                        확인\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\nexport default Info","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/login/Login.tsx",["186","187","188","189","190","191"],"import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport styled from '@emotion/styled'\nimport member, { login } from '../../modules/member';\nimport { RootState } from '../../modules';\nimport { useHistory } from 'react-router';\nimport { Switch } from '@material-ui/core';\nimport api from \"../../util/api\";\n\n\nlet DivWrapper = styled.div`\nwidth:100%;\nmargin: 0 auto;\npadding: 0px;\nbox-sizing: border-box;\n`;\n\nlet DivLoginContainer = styled.div`\nwidth: 100%;\n  min-height: 100vh;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 15px;\n  background: #ebeeef;\n`;\n\nlet DivLoginBox = styled.div`\nwidth: 670px;\nbackground: #fff;\nborder-radius: 10px;\noverflow: hidden;\nposition: relative;\nbox-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);\n`;\nlet DivLoginTitle = styled.div`\n&:first-child{width: 100%;\nposition: relative;\nz-index: 1;\ndisplay: -webkit-box;\ndisplay: -webkit-flex;\ndisplay: -moz-box;\ndisplay: -ms-flexbox;\ndisplay: flex;\nflex-wrap: wrap;\nflex-direction: column;\nalign-items: center;\n\nbackground-repeat: no-repeat;\nbackground-size: cover;\nbackground-position: center;\n\npadding: 70px 15px 74px 15px;\n\n&:before{\n    content: \"\";\n    display: block;\n    position: absolute;\n    z-index: -1;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    background-color: rgba(54,84,99,0.7);\n}    \n}\n`;\n\nlet SpanLoginTitle = styled.span`\nfont-family: Poppins-Bold;\nfont-size: 30px;\ncolor: #fff;\ntext-transform: uppercase;\nline-height: 1.2;\ntext-align: center;\n`;\n\nconst FormLogin = styled.form`\nwidth: 100%;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 43px 88px 93px 190px;\n  box-sizing:border-box;\n`;\n\nconst DivLoginGroup = styled.div`\nwidth: 100%;\n  position: relative;\n  border-bottom: 1px solid #b2b2b2;\n  margin-bottom: 26px;\n`;\n\nconst SpanLoginLabel = styled.span`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #808080;\n  line-height: 1.2;\n  text-align: right;\n  position: absolute;\n  top: 14px;\n  left: -105px;\n  width: 80px;\n`;\nconst InputLogin = styled.input`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #555555;\n  line-height: 1.2;\n  height: 45px;\n  display: block;\n  width: 100%;\n  background: transparent;\n  padding: 0 5px;\n  outline:none;\n  border:none;\n`;\n\nconst SpanLoginFocus = styled.span`\n&:first-child{position: absolute;\n  display: block;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n  &:before{\n    content: \"\";\n    display: block;\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    width:0;\n    height: 2px;\n    transition: all 0.6s;\n    background: #57b846;\n  }\n  ${InputLogin}:focus + &:before{\n    width: 100%;\n  }\n}\n`;\n\nconst DivButtonWrapper = styled.div`\nwidth: 100%;\ndisplay: -webkit-box;\ndisplay: -webkit-flex;\ndisplay: -moz-box;\ndisplay: -ms-flexbox;\ndisplay: flex;\nflex-wrap: wrap;\n`;\n\nconst ButtonLogin = styled.button`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\npadding: 0 20px;\nmin-width: 160px;\nheight: 50px;\nbackground-color: #57b846;\nborder-radius: 25px;\n\nfont-family: Poppins-Regular;\nfont-size: 16px;\ncolor: #fff;\n// line-height: 1.2;\n\ntransition: all 0.4s;\n&:hover{\n    background-color: #555555;\n    cursor:pointer;\n}&:active{\n    background-color: #222222;\n}\n`;\n\n\n//style end\nfunction parseJwt(token: string) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return JSON.parse(jsonPayload);\n};\nfunction Login() {\n  const history = useHistory();\n  let [username, setUsername] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n  let [isLoginSuccess, setIsLoginSuccess] = useState(true);\n  const dispatch = useDispatch();\n  async function handleLoginButton(e: any) {\n    e.preventDefault();\n    try {\n      const response = await api.post(`/authenticate`,\n        { username: username, password: password },\n        {\n          headers: {\n            'Content-type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n      dispatch(login({ userId: parseJwt(response.data.token).sub ,userRole: parseJwt(response.data.token).userRole,token:response.data.token, isLogined: true }))\n      sessionStorage.setItem(\"current_user_token\", response.data.token);\n      history.push(\"/\");\n    } catch (err) {\n      setIsLoginSuccess(false)\n    }\n  }\n  \n  return (\n    <div>\n      <DivWrapper>\n        <DivLoginContainer>\n          <DivLoginBox>\n            <DivLoginTitle>\n              <SpanLoginTitle>로그인</SpanLoginTitle>\n            </DivLoginTitle>\n            <FormLogin onSubmit={handleLoginButton}>\n              <DivLoginGroup>\n                <SpanLoginLabel>아이디</SpanLoginLabel>\n                <InputLogin type=\"text\" className=\"logininput\" value={username} onChange={e => setUsername(e.target.value)} />\n                {/* <SpanLoginFocus></SpanLoginFocus>  */}\n              </DivLoginGroup>\n              <DivLoginGroup>\n                <SpanLoginLabel>비밀번호</SpanLoginLabel>\n                <InputLogin type=\"password\" className=\"logininput\" value={password} onChange={e => setPassword(e.target.value)} />\n                {/* <SpanLoginFocus></SpanLoginFocus>  */}\n              </DivLoginGroup>\n              {!isLoginSuccess ?\n                <div style={{ color: 'red' }}>\n                  로그인에 실패했습니다.\n                  </div> :\n                null\n              }\n              <DivButtonWrapper>\n                <ButtonLogin onClick={handleLoginButton}>로그인</ButtonLogin>\n              </DivButtonWrapper>\n            </FormLogin>\n          </DivLoginBox>\n        </DivLoginContainer>\n      </DivWrapper>\n    </div>\n  );\n}\n\nexport default Login;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/Posts.tsx",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/DropZone.tsx",["207","208","209","210","211","212","213","214","215","216","217"],"import React, { forwardRef, useState, useEffect, useRef, InputHTMLAttributes } from 'react';\nimport styled from '@emotion/styled';\nimport { RootState } from '../../modules';\nimport { add, remove } from '../../modules/fileList';\nimport { preProcessFile } from 'typescript';\n\nconst DivContainer = styled.div`\n`;\n\nconst PContainer = styled.p`\ncolor: red;\ntext-align: center;\n`;\n\nconst DivDropConatiner = styled.div`\n// display: flex;\nalign-items: center;\njustify-content: center;\nmargin: 0;\n// width: 800px;\nheight: 200px;\nborder: 4px dashed #4aa1f3;\n`;\n\nconst DivUploadIcon = styled.div`\nwidth: 50px;\nheight: 50px;\nbackground: url(/images/upload.svg) no-repeat center center; \nbackground-size: 100%;\ntext-align: center;\nmargin: 0 auto;\nmargin-top: 20px;\npadding-top: 30px;\n`;\n\nconst DivDropMessage = styled.div`\ntext-align: center;\ncolor: #4aa1f3;\nfont-family: Arial;\nfont-size: 20px;\n`;\n\nconst DivFileDisplay = styled.div`\n// position: fixed;\n// width: 805px;\n`;\n\nconst DivFileStatus = styled.div`\ndisplay:flex;\nwidth: 100%;\nvertical-align:top;\nmargin-top: 10px;\nmargin-bottom: 20px;\nposition: relative;\nline-height: 50px;\nheight: 50px;\n\n> div{\n    overflow:hidden;\n}\n`;\n\nconst DivFileType = styled.div`\ndisplay: inline-block!important;\nposition: absolute;\nfont-size: 12px;\nfont-weight: 700;\nline-height: 13px;\nmargin-top: 25px;\npadding: 0 4px;\nborder-radius: 2px;\nbox-shadow: 1px 1px 2px #abc;\ncolor: #fff;\nbackground: #0080c8;\ntext-transform: uppercase;\n`;\n\nconst SpanFileName = styled.span`\ndisplay: inline-block;\nvertical-align:top;\nmargin-left: 50px;\ncolor: #4aa1f3;\n`;\n\nconst SpanFileSize = styled.span`\ndisplay:inline-block;\nvertical-align:top;\ncolor:#30693D;\nmargin-left:10px;\nmargin-right:5px;\nmargin-left: 10px;\ncolor: #444242;\nfont-weight: 700;\nfont-size: 14px;\n`;\n\nconst SpanFileRemove = styled.span`\nposition: absolute;\ntop: 20px;\nright: 10px;\nline-height: 15px;\ncursor: pointer;\ncolor: red;\nmargin-right: -10px;\n`;\n\nconst SpanFileErrorMsg = styled.span`\ncolor:red;\n`;\n\nconst InputFileinput = styled.input`\ndisplay:none;\n`;\n\nconst DropZone = (props: any) => {\n    const fileList: File[] = props.filesState;\n    const setFileList = props.setFilesState;\n\n\n    const handleFiles = (files: FileList) => {\n        for (let i = 0; i < files.length; i++) {\n            if (fileList.filter((file: File) => file.name == files[i].name).length <= 0) {\n                setFileList((pre: File[]) => [...pre, files[i]]);\n            }\n        }\n    }\n\n    const dragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    }\n\n    const dragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    }\n\n    const dragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    }\n\n    const fileDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        const files: FileList = e.dataTransfer.files;\n        if (files.length) {\n            handleFiles(files);\n        }\n    }\n\n    const fileSize = (size: number) => {\n        if (size === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(size) / Math.log(k));\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    const fileType = (fileName: string) => {\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n    }\n\n    const removeFile = (name: string) => {\n        const targetIndex = fileList.findIndex((e: File) => e.name === name);\n        let tempFileList = [...fileList]\n        tempFileList.splice(targetIndex, 1)\n        setFileList(tempFileList)\n        // dispatch(remove(targetIndex))\n    }\n\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const fileInputClicked = () => {\n        fileInputRef.current.click();\n    }\n    const filesSelected = () => {\n        if (fileInputRef.current.files.length) {\n            handleFiles(fileInputRef.current.files);\n        }\n    }\n\n    return (\n        <DivContainer id=\"container\" onDrop={fileDrop} onDragLeave={dragLeave} onDragOver={dragOver} onDragEnter={dragEnter}>\n            <DivDropConatiner onClick={fileInputClicked}>\n                <DivDropMessage>\n                    <DivUploadIcon />\n                    파일을 드래그 & 드랍 하거나 클릭하여 업로드\n                </DivDropMessage>\n                <InputFileinput type=\"file\" multiple onChange={filesSelected} ref={fileInputRef} />\n            </DivDropConatiner>\n            <DivFileDisplay>\n                {fileList.map((data: File, i) =>\n                    <DivFileStatus key={i}>\n                        <div>\n                            <div className=\"file-type-logo\"></div>\n                            <DivFileType>{fileType(data.name)}</DivFileType>\n                            <SpanFileName >{data.name}</SpanFileName>\n                            <SpanFileSize>({fileSize(data.size)})</SpanFileSize>\n                            <SpanFileRemove onClick={() => removeFile(data.name)}>×</SpanFileRemove>\n                        </div>\n                    </DivFileStatus>\n                )}\n            </DivFileDisplay>\n        </DivContainer>\n    )\n}\n\nexport default DropZone;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/fileList.ts",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/CategoryManager/categories.tsx",["218","219","220","221","222","223"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/App.tsx",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/util/api.ts",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/admin/CategoryManager/index.tsx",[],{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":13},{"ruleId":"228","severity":1,"message":"232","line":6,"column":10,"nodeType":"230","messageId":"231","endLine":6,"endColumn":20},{"ruleId":"228","severity":1,"message":"233","line":6,"column":22,"nodeType":"230","messageId":"231","endLine":6,"endColumn":34},{"ruleId":"228","severity":1,"message":"234","line":6,"column":36,"nodeType":"230","messageId":"231","endLine":6,"endColumn":43},{"ruleId":"228","severity":1,"message":"235","line":7,"column":36,"nodeType":"230","messageId":"231","endLine":7,"endColumn":42},{"ruleId":"236","severity":1,"message":"237","line":179,"column":47,"nodeType":"238","messageId":"239","endLine":179,"endColumn":49},{"ruleId":"228","severity":1,"message":"240","line":244,"column":11,"nodeType":"230","messageId":"231","endLine":244,"endColumn":26},{"ruleId":"228","severity":1,"message":"229","line":19,"column":8,"nodeType":"230","messageId":"231","endLine":19,"endColumn":13},{"ruleId":"228","severity":1,"message":"241","line":25,"column":6,"nodeType":"230","messageId":"231","endLine":25,"endColumn":17},{"ruleId":"242","severity":1,"message":"243","line":51,"column":42,"nodeType":"244","messageId":"245","endLine":51,"endColumn":43,"suggestions":"246"},{"ruleId":"242","severity":1,"message":"243","line":51,"column":75,"nodeType":"244","messageId":"245","endLine":51,"endColumn":76,"suggestions":"247"},{"ruleId":"242","severity":1,"message":"243","line":53,"column":44,"nodeType":"244","messageId":"245","endLine":53,"endColumn":45,"suggestions":"248"},{"ruleId":"242","severity":1,"message":"249","line":53,"column":46,"nodeType":"244","messageId":"245","endLine":53,"endColumn":47,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":373,"column":7,"nodeType":"253","endLine":373,"endColumn":17,"suggestions":"254"},{"ruleId":"251","severity":1,"message":"252","line":376,"column":8,"nodeType":"253","endLine":376,"endColumn":17,"suggestions":"255"},{"ruleId":"228","severity":1,"message":"256","line":17,"column":46,"nodeType":"230","messageId":"231","endLine":17,"endColumn":52},{"ruleId":"228","severity":1,"message":"257","line":17,"column":54,"nodeType":"230","messageId":"231","endLine":17,"endColumn":67},{"ruleId":"228","severity":1,"message":"258","line":17,"column":69,"nodeType":"230","messageId":"231","endLine":17,"endColumn":82},{"ruleId":"228","severity":1,"message":"259","line":17,"column":84,"nodeType":"230","messageId":"231","endLine":17,"endColumn":101},{"ruleId":"228","severity":1,"message":"260","line":17,"column":103,"nodeType":"230","messageId":"231","endLine":17,"endColumn":114},{"ruleId":"228","severity":1,"message":"261","line":17,"column":133,"nodeType":"230","messageId":"231","endLine":17,"endColumn":156},{"ruleId":"228","severity":1,"message":"229","line":23,"column":8,"nodeType":"230","messageId":"231","endLine":23,"endColumn":13},{"ruleId":"228","severity":1,"message":"262","line":116,"column":10,"nodeType":"230","messageId":"231","endLine":116,"endColumn":18},{"ruleId":"228","severity":1,"message":"263","line":183,"column":10,"nodeType":"230","messageId":"231","endLine":183,"endColumn":13},{"ruleId":"228","severity":1,"message":"264","line":183,"column":15,"nodeType":"230","messageId":"231","endLine":183,"endColumn":21},{"ruleId":"251","severity":1,"message":"265","line":215,"column":6,"nodeType":"253","endLine":215,"endColumn":15,"suggestions":"266"},{"ruleId":"236","severity":1,"message":"237","line":232,"column":41,"nodeType":"238","messageId":"239","endLine":232,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":308,"column":34,"nodeType":"269","messageId":"270","endLine":308,"endColumn":36},{"ruleId":"271","severity":1,"message":"272","line":342,"column":9,"nodeType":"230","messageId":"273","endLine":342,"endColumn":17},{"ruleId":"267","severity":1,"message":"268","line":356,"column":16,"nodeType":"269","messageId":"270","endLine":356,"endColumn":18},{"ruleId":"224","replacedBy":"274"},{"ruleId":"226","replacedBy":"275"},{"ruleId":"228","severity":1,"message":"276","line":1,"column":49,"nodeType":"230","messageId":"231","endLine":1,"endColumn":55},{"ruleId":"228","severity":1,"message":"229","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":13},{"ruleId":"228","severity":1,"message":"232","line":7,"column":10,"nodeType":"230","messageId":"231","endLine":7,"endColumn":20},{"ruleId":"228","severity":1,"message":"233","line":7,"column":22,"nodeType":"230","messageId":"231","endLine":7,"endColumn":34},{"ruleId":"228","severity":1,"message":"277","line":8,"column":10,"nodeType":"230","messageId":"231","endLine":8,"endColumn":16},{"ruleId":"228","severity":1,"message":"235","line":8,"column":49,"nodeType":"230","messageId":"231","endLine":8,"endColumn":55},{"ruleId":"228","severity":1,"message":"278","line":8,"column":127,"nodeType":"230","messageId":"231","endLine":8,"endColumn":134},{"ruleId":"228","severity":1,"message":"279","line":8,"column":168,"nodeType":"230","messageId":"231","endLine":8,"endColumn":182},{"ruleId":"228","severity":1,"message":"280","line":150,"column":9,"nodeType":"230","messageId":"231","endLine":150,"endColumn":23},{"ruleId":"236","severity":1,"message":"237","line":162,"column":47,"nodeType":"238","messageId":"239","endLine":162,"endColumn":49},{"ruleId":"228","severity":1,"message":"281","line":252,"column":35,"nodeType":"230","messageId":"231","endLine":252,"endColumn":41},{"ruleId":"267","severity":1,"message":"282","line":317,"column":31,"nodeType":"269","messageId":"270","endLine":317,"endColumn":33},{"ruleId":"224","replacedBy":"283"},{"ruleId":"226","replacedBy":"284"},{"ruleId":"228","severity":1,"message":"285","line":15,"column":22,"nodeType":"230","messageId":"231","endLine":15,"endColumn":36},{"ruleId":"228","severity":1,"message":"229","line":16,"column":8,"nodeType":"230","messageId":"231","endLine":16,"endColumn":13},{"ruleId":"228","severity":1,"message":"286","line":20,"column":10,"nodeType":"230","messageId":"231","endLine":20,"endColumn":14},{"ruleId":"228","severity":1,"message":"287","line":55,"column":6,"nodeType":"230","messageId":"231","endLine":55,"endColumn":10},{"ruleId":"267","severity":1,"message":"282","line":125,"column":108,"nodeType":"269","messageId":"270","endLine":125,"endColumn":110},{"ruleId":"267","severity":1,"message":"268","line":125,"column":118,"nodeType":"269","messageId":"270","endLine":125,"endColumn":120},{"ruleId":"267","severity":1,"message":"282","line":131,"column":112,"nodeType":"269","messageId":"270","endLine":131,"endColumn":114},{"ruleId":"267","severity":1,"message":"268","line":131,"column":122,"nodeType":"269","messageId":"270","endLine":131,"endColumn":124},{"ruleId":"267","severity":1,"message":"268","line":133,"column":94,"nodeType":"269","messageId":"270","endLine":133,"endColumn":96},{"ruleId":"228","severity":1,"message":"288","line":3,"column":19,"nodeType":"230","messageId":"231","endLine":3,"endColumn":27},{"ruleId":"228","severity":1,"message":"289","line":8,"column":8,"nodeType":"230","messageId":"231","endLine":8,"endColumn":14},{"ruleId":"228","severity":1,"message":"290","line":12,"column":8,"nodeType":"230","messageId":"231","endLine":12,"endColumn":14},{"ruleId":"228","severity":1,"message":"291","line":28,"column":12,"nodeType":"230","messageId":"231","endLine":28,"endColumn":26},{"ruleId":"228","severity":1,"message":"292","line":28,"column":28,"nodeType":"230","messageId":"231","endLine":28,"endColumn":45},{"ruleId":"251","severity":1,"message":"293","line":32,"column":21,"nodeType":"294","endLine":32,"endColumn":65},{"ruleId":"228","severity":1,"message":"295","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":15},{"ruleId":"224","replacedBy":"296"},{"ruleId":"226","replacedBy":"297"},{"ruleId":"228","severity":1,"message":"298","line":6,"column":5,"nodeType":"230","messageId":"231","endLine":6,"endColumn":10},{"ruleId":"228","severity":1,"message":"299","line":11,"column":5,"nodeType":"230","messageId":"231","endLine":11,"endColumn":17},{"ruleId":"228","severity":1,"message":"300","line":13,"column":5,"nodeType":"230","messageId":"231","endLine":13,"endColumn":13},{"ruleId":"228","severity":1,"message":"301","line":14,"column":5,"nodeType":"230","messageId":"231","endLine":14,"endColumn":17},{"ruleId":"228","severity":1,"message":"302","line":19,"column":5,"nodeType":"230","messageId":"231","endLine":19,"endColumn":13},{"ruleId":"228","severity":1,"message":"303","line":30,"column":10,"nodeType":"230","messageId":"231","endLine":30,"endColumn":20},{"ruleId":"228","severity":1,"message":"234","line":30,"column":46,"nodeType":"230","messageId":"231","endLine":30,"endColumn":53},{"ruleId":"228","severity":1,"message":"229","line":34,"column":8,"nodeType":"230","messageId":"231","endLine":34,"endColumn":13},{"ruleId":"228","severity":1,"message":"304","line":39,"column":10,"nodeType":"230","messageId":"231","endLine":39,"endColumn":18},{"ruleId":"228","severity":1,"message":"262","line":90,"column":10,"nodeType":"230","messageId":"231","endLine":90,"endColumn":18},{"ruleId":"251","severity":1,"message":"305","line":129,"column":8,"nodeType":"253","endLine":129,"endColumn":18,"suggestions":"306"},{"ruleId":"267","severity":1,"message":"268","line":134,"column":36,"nodeType":"269","messageId":"270","endLine":134,"endColumn":38},{"ruleId":"267","severity":1,"message":"282","line":135,"column":44,"nodeType":"269","messageId":"270","endLine":135,"endColumn":46},{"ruleId":"228","severity":1,"message":"307","line":214,"column":11,"nodeType":"230","messageId":"231","endLine":214,"endColumn":35},{"ruleId":"228","severity":1,"message":"308","line":2,"column":23,"nodeType":"230","messageId":"231","endLine":2,"endColumn":34},{"ruleId":"228","severity":1,"message":"229","line":3,"column":8,"nodeType":"230","messageId":"231","endLine":3,"endColumn":13},{"ruleId":"228","severity":1,"message":"309","line":5,"column":8,"nodeType":"230","messageId":"231","endLine":5,"endColumn":14},{"ruleId":"228","severity":1,"message":"310","line":6,"column":10,"nodeType":"230","messageId":"231","endLine":6,"endColumn":19},{"ruleId":"228","severity":1,"message":"311","line":8,"column":10,"nodeType":"230","messageId":"231","endLine":8,"endColumn":16},{"ruleId":"228","severity":1,"message":"312","line":129,"column":7,"nodeType":"230","messageId":"231","endLine":129,"endColumn":21},{"ruleId":"228","severity":1,"message":"298","line":12,"column":3,"nodeType":"230","messageId":"231","endLine":12,"endColumn":8},{"ruleId":"228","severity":1,"message":"278","line":13,"column":3,"nodeType":"230","messageId":"231","endLine":13,"endColumn":10},{"ruleId":"228","severity":1,"message":"313","line":14,"column":3,"nodeType":"230","messageId":"231","endLine":14,"endColumn":13},{"ruleId":"228","severity":1,"message":"314","line":18,"column":10,"nodeType":"230","messageId":"231","endLine":18,"endColumn":30},{"ruleId":"228","severity":1,"message":"285","line":20,"column":22,"nodeType":"230","messageId":"231","endLine":20,"endColumn":36},{"ruleId":"228","severity":1,"message":"315","line":20,"column":38,"nodeType":"230","messageId":"231","endLine":20,"endColumn":59},{"ruleId":"228","severity":1,"message":"229","line":21,"column":8,"nodeType":"230","messageId":"231","endLine":21,"endColumn":13},{"ruleId":"228","severity":1,"message":"316","line":23,"column":17,"nodeType":"230","messageId":"231","endLine":23,"endColumn":33},{"ruleId":"228","severity":1,"message":"276","line":23,"column":46,"nodeType":"230","messageId":"231","endLine":23,"endColumn":52},{"ruleId":"251","severity":1,"message":"317","line":108,"column":6,"nodeType":"253","endLine":108,"endColumn":15,"suggestions":"318"},{"ruleId":"267","severity":1,"message":"282","line":138,"column":84,"nodeType":"269","messageId":"270","endLine":138,"endColumn":86},{"ruleId":"267","severity":1,"message":"268","line":138,"column":94,"nodeType":"269","messageId":"270","endLine":138,"endColumn":96},{"ruleId":"267","severity":1,"message":"282","line":144,"column":86,"nodeType":"269","messageId":"270","endLine":144,"endColumn":88},{"ruleId":"267","severity":1,"message":"268","line":144,"column":96,"nodeType":"269","messageId":"270","endLine":144,"endColumn":98},{"ruleId":"267","severity":1,"message":"268","line":146,"column":66,"nodeType":"269","messageId":"270","endLine":146,"endColumn":68},{"ruleId":"228","severity":1,"message":"319","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":27},{"ruleId":"228","severity":1,"message":"320","line":1,"column":29,"nodeType":"230","messageId":"231","endLine":1,"endColumn":37},{"ruleId":"228","severity":1,"message":"321","line":1,"column":39,"nodeType":"230","messageId":"231","endLine":1,"endColumn":48},{"ruleId":"228","severity":1,"message":"322","line":1,"column":58,"nodeType":"230","messageId":"231","endLine":1,"endColumn":77},{"ruleId":"228","severity":1,"message":"310","line":3,"column":10,"nodeType":"230","messageId":"231","endLine":3,"endColumn":19},{"ruleId":"228","severity":1,"message":"323","line":4,"column":10,"nodeType":"230","messageId":"231","endLine":4,"endColumn":13},{"ruleId":"228","severity":1,"message":"324","line":4,"column":15,"nodeType":"230","messageId":"231","endLine":4,"endColumn":21},{"ruleId":"228","severity":1,"message":"325","line":5,"column":10,"nodeType":"230","messageId":"231","endLine":5,"endColumn":24},{"ruleId":"228","severity":1,"message":"326","line":10,"column":7,"nodeType":"230","messageId":"231","endLine":10,"endColumn":17},{"ruleId":"228","severity":1,"message":"327","line":107,"column":7,"nodeType":"230","messageId":"231","endLine":107,"endColumn":23},{"ruleId":"267","severity":1,"message":"268","line":122,"column":59,"nodeType":"269","messageId":"270","endLine":122,"endColumn":61},{"ruleId":"228","severity":1,"message":"328","line":14,"column":5,"nodeType":"230","messageId":"231","endLine":14,"endColumn":19},{"ruleId":"228","severity":1,"message":"329","line":19,"column":5,"nodeType":"230","messageId":"231","endLine":19,"endColumn":14},{"ruleId":"228","severity":1,"message":"276","line":33,"column":38,"nodeType":"230","messageId":"231","endLine":33,"endColumn":44},{"ruleId":"236","severity":1,"message":"237","line":191,"column":47,"nodeType":"238","messageId":"239","endLine":191,"endColumn":49},{"ruleId":"236","severity":1,"message":"237","line":218,"column":47,"nodeType":"238","messageId":"239","endLine":218,"endColumn":49},{"ruleId":"228","severity":1,"message":"330","line":310,"column":11,"nodeType":"230","messageId":"231","endLine":310,"endColumn":37},"no-native-reassign",["331"],"no-negated-in-lhs",["332"],"@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'ExpandMore' is defined but never used.","'ChevronRight' is defined but never used.","'Comment' is defined but never used.","'colors' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleAlertOpen' is assigned a value but never used.","'MatchParams' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["333","334"],["335","336"],["337","338"],"Unnecessary escape character: \\-.",["339","340"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMembers'. Either include it or remove the dependency array.","ArrayExpression",["341"],["342"],"'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'parseJwt' is defined but never used.","'crt' is assigned a value but never used.","'setCrt' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["343"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-redeclare","'Category' is already defined.","redeclared",["331"],["332"],"'useRef' is defined but never used.","'Avatar' is defined but never used.","'Divider' is defined but never used.","'ListItemAvatar' is defined but never used.","'temp' is defined but never used.","'result' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["331"],["332"],"'PaginationItem' is defined but never used.","'Link' is defined but never used.","'Page' is defined but never used.","'Provider' is defined but never used.","'Header' is defined but never used.","'Drawer' is defined but never used.","'isAdminLogined' is assigned a value but never used.","'setIsAdminLogined' is assigned a value but never used.","Assignments to the 'token' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'Sidebar' is defined but never used.",["331"],["332"],"'Paper' is defined but never used.","'ListItemIcon' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'Checkbox' is defined but never used.","'StarBorder' is defined but never used.","'promises' is defined but never used.","React Hook useEffect has a missing dependency: 'findParent'. Either include it or remove the dependency array.",["344"],"'handleMultiDownloadAsZip' is assigned a value but never used.","'useSelector' is defined but never used.","'member' is defined but never used.","'RootState' is defined but never used.","'Switch' is defined but never used.","'SpanLoginFocus' is assigned a value but never used.","'ButtonBase' is defined but never used.","'OverridableComponent' is defined but never used.","'PaginationItemTypeMap' is defined but never used.","'MutableRefObject' is defined but never used.","React Hook useEffect has a missing dependency: 'loadContents'. Either include it or remove the dependency array.",["345"],"'forwardRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'InputHTMLAttributes' is defined but never used.","'add' is defined but never used.","'remove' is defined but never used.","'preProcessFile' is defined but never used.","'PContainer' is assigned a value but never used.","'SpanFileErrorMsg' is assigned a value but never used.","'TableContainer' is defined but never used.","'TableBody' is defined but never used.","'handleInputNewCategoryName' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"346","fix":"347","desc":"348"},{"messageId":"349","fix":"350","desc":"351"},{"messageId":"346","fix":"352","desc":"348"},{"messageId":"349","fix":"353","desc":"351"},{"messageId":"346","fix":"354","desc":"348"},{"messageId":"349","fix":"355","desc":"351"},{"messageId":"346","fix":"356","desc":"348"},{"messageId":"349","fix":"357","desc":"351"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},"removeEscape",{"range":"368","text":"369"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"370","text":"371"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"372","text":"369"},{"range":"373","text":"371"},{"range":"374","text":"369"},{"range":"375","text":"371"},{"range":"376","text":"369"},{"range":"377","text":"371"},"Update the dependencies array to be: [isSearch, loadMembers]",{"range":"378","text":"379"},"Update the dependencies array to be: [loadMembers, pageNum]",{"range":"380","text":"381"},"Update the dependencies array to be: [pageNum, search]",{"range":"382","text":"383"},"Update the dependencies array to be: [assetSeq, findParent]",{"range":"384","text":"385"},"Update the dependencies array to be: [loadContents, pageNum]",{"range":"386","text":"387"},[1376,1377],"",[1376,1376],"\\",[1409,1410],[1409,1409],[1534,1535],[1534,1534],[1536,1537],[1536,1536],[12886,12896],"[isSearch, loadMembers]",[12950,12959],"[loadMembers, pageNum]",[6459,6468],"[pageNum, search]",[3478,3488],"[assetSeq, findParent]",[2366,2375],"[loadContents, pageNum]"]