[{"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/App.tsx":"1","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/index.ts":"2","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/index.tsx":"3","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SideHeader.tsx":"4","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/Posts.tsx":"5","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/index.tsx":"6","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/login/Login.tsx":"7","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/Info.tsx":"8","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/Upload.tsx":"9","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/index.tsx":"10","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/ModInfo.tsx":"11","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/index.tsx":"12","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SearchWindow.tsx":"13","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/reportWebVitals.ts":"14","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/index.tsx":"15","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/fileList.ts":"16","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/DropZone.tsx":"17","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/member.ts":"18"},{"size":711,"mtime":1612402205486,"results":"19","hashOfConfig":"20"},{"size":257,"mtime":1612316359625,"results":"21","hashOfConfig":"20"},{"size":1489,"mtime":1613470700301,"results":"22","hashOfConfig":"20"},{"size":14431,"mtime":1613549686498,"results":"23","hashOfConfig":"20"},{"size":6146,"mtime":1613469901419,"results":"24","hashOfConfig":"20"},{"size":382,"mtime":1613438388671,"results":"25","hashOfConfig":"20"},{"size":5626,"mtime":1613532696535,"results":"26","hashOfConfig":"20"},{"size":15133,"mtime":1613537955575,"results":"27","hashOfConfig":"20"},{"size":18639,"mtime":1613470710690,"results":"28","hashOfConfig":"20"},{"size":500,"mtime":1612155094723,"results":"29","hashOfConfig":"20"},{"size":16105,"mtime":1613534762074,"results":"30","hashOfConfig":"20"},{"size":388,"mtime":1613454456600,"results":"31","hashOfConfig":"20"},{"size":6818,"mtime":1613469975007,"results":"32","hashOfConfig":"20"},{"size":425,"mtime":1612155094723,"results":"33","hashOfConfig":"20"},{"size":345,"mtime":1613432960743,"results":"34","hashOfConfig":"20"},{"size":1018,"mtime":1612316348756,"results":"35","hashOfConfig":"20"},{"size":5244,"mtime":1612411444510,"results":"36","hashOfConfig":"20"},{"size":830,"mtime":1612239814673,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"b90rkt",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/App.tsx",[],["87","88"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/index.ts",[],["89","90"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/index.tsx",["91","92","93","94"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SideHeader.tsx",["95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/Posts.tsx",["109","110","111","112","113","114","115","116","117","118","119","120","121","122"],"import {\n  Grid,\n  Typography,\n  Card,\n  CardActions,\n  CardContent,\n  Button,\n  GridList,\n  GridListTile,\n  makeStyles,\n  GridListTileBar,\n  Paper,\n  Divider,\n  ButtonBase,\n  CircularProgress,\n\n} from '@material-ui/core'\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\n\nimport { Pagination, PaginationItem, PaginationItemTypeMap } from '@material-ui/lab';\nimport axios from 'axios';\nimport moment from 'moment';\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(() => ({\n  gridList: {\n    width: 400,\n    height: 400,\n  },\n  imageCountLessEqualTwo: {\n    height: '100%!important'\n  },\n  imageCountOverTwo: {\n    height: '50%!important'\n  },\n  ul: {\n    justifyContent: 'center',\n    padding: 10,\n\n  }\n}))\n\ntype Asset = {\n  assetSeq: number,\n  assetOwner: string,\n  assetOwnerName: string,\n  assetTitle: string,\n  assetCreateDate: Date,\n  assetUpdateDate: Date,\n  locations: string,\n  assetFiles: Array<AssetFile>,\n  tags: string,\n  locationArray: Array<string>,\n  assetCategory: number,\n  assetCategoryName: string\n}\n\ntype Page = {\n  startPage: number,\n  endPage: number,\n  prev: false,\n  next: false,\n  total: number\n}\n\ntype AssetFile = {\n  assetLocation: string,\n  assetOriginName: string,\n  assetSeq: number,\n  assetSize: number,\n  assetType: string,\n}\n\ntype MatchParams = {\n  pageNum: string\n}\n\n\n\nconst Posts = (props: MatchParams) => {\n  let sessionUser = sessionStorage.getItem(\"sessionUser\");\n  if (sessionUser) {\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n  }\n\n  const [contents, setContents] = useState<Array<Asset>>([]);\n  const [pageNum, setPageNum] = useState<number>(1);\n  const [pageInfo, setPageInfo] = useState<Page>();\n  const history = useHistory();\n  const toAssetDetail = (assetSeq: number) => {\n    history.push('/detail/' + assetSeq)\n  }\n\n\n  const classes = useStyles();\n  async function loadContents() {\n    sessionUser = sessionStorage.getItem(\"sessionUser\");\n    if (sessionUser) {\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n    }\n    const response = await axios.get(`/api/list/${pageNum}`)\n    const list: Array<Asset> = response.data.result\n    setPageInfo(response.data.reference)\n    setContents(list)\n  };\n  useEffect(() => {\n    loadContents();\n  }, [pageNum]);\n  \n  return (\n    <div style={{\n      // marginTop: 20, \n      padding: 30\n    }}>\n      <Grid container spacing={3} justify=\"center\">\n        {contents ? contents.map(post => (\n          <Grid item key={post.assetSeq}>\n            <Card>\n              <GridList className={classes.gridList}>\n                {\n                  post.assetFiles.map((assetFile, i) => {\n                    let type = assetFile.assetType\n                    let location = assetFile.assetLocation\n                    let imgUrl;\n                    if (!type) {\n                      imgUrl = '/images/unsupportedFile.png'\n                    } else if (type.includes('image')) {\n                      imgUrl = `/uploadedImages/thumb${location.substring(location.lastIndexOf(\"/uploadedImages\") + 15)}`\n                    } else if (type.includes('video')) {\n                      imgUrl = '/images/videoFile.png'\n                    } else if (type.includes('audio')) {\n                      imgUrl = '/images/audioFile.png'\n                    } else {\n                      imgUrl = '/images/unsupportedFile.png'\n                    }\n                    return (\n                      (post.locationArray.length < 3) ?\n                        <GridListTile key={i} cols={(post.locationArray.length % 2 != 0 && i == 0) ? 2 : 1} classes={{ root: classes.imageCountLessEqualTwo }}>\n                          <img src={imgUrl} alt=\"\" />\n\n                        </GridListTile>\n                        :\n                        i <= 3 ?\n                          <GridListTile key={i} cols={(post.locationArray.length % 2 != 0 && i == 0 && post.locationArray.length <= 3) ? 2 : 1} classes={{ root: classes.imageCountOverTwo }}>\n                            <img src={imgUrl} alt=\"\" />\n                            {(post.locationArray.length > 4 && i == 3) ?\n                              <Link to={\"/detail/\" + assetFile.assetSeq} >\n                                <GridListTileBar title={post.locationArray.length - (i + 1) + '개 더보기'} classes={{ root: classes.imageCountLessEqualTwo }} />\n                              </Link>\n\n                              : null}\n                          </GridListTile> :\n                          null\n                    )\n                  })\n                }\n              </GridList>\n\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  {post.assetTitle}\n                </Typography>\n\n                <Typography align='right' component=\"p\" style={{ color: 'grey' }}>{moment(post.assetCreateDate).format('YYYY-MM-DD HH:mm:ss')}</Typography>\n                <Typography align='left' component=\"p\">카테고리 : {post.assetCategoryName}</Typography>\n                <Typography align='left' component=\"p\">작성자 : {post.assetOwnerName}</Typography>\n                <Typography align='left' component=\"p\">태그 : {post.tags}</Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\" color=\"primary\" onClick={() => { toAssetDetail(post.assetSeq) }}>\n                  상세보기\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))\n        :  (<CircularProgress />)}\n      </Grid>\n      <Grid>\n        {pageInfo && <Pagination classes={{ ul: classes.ul }}\n          hideNextButton={!pageInfo.next}\n          hidePrevButton={!pageInfo.prev}\n          count={pageInfo.endPage}\n          page={pageNum}\n         onChange={(e:React.ChangeEvent<unknown>,value:number)=>{setPageNum(value)}}\n          shape=\"rounded\" />}\n      </Grid>\n    </div>\n  )\n}\n\nexport default Posts;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/main/index.tsx",["123"],"import Posts from \"./Posts\"\nimport Sidebar from \"../commons/Sidebar\"\nimport { RouteComponentProps } from \"react-router-dom\"\n\ntype MatchParams = {\n    pageNum: string\n}\n\nconst Main = ({ match }: RouteComponentProps<MatchParams>) => {\n    const {pageNum} = match.params\n    return (\n        <div>\n                <Posts pageNum={pageNum}/>\n        </div>\n    )\n}\n\nexport default Main;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/login/Login.tsx",["124","125","126","127"],"import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport styled from '@emotion/styled'\nimport member, { login } from '../../modules/member';\nimport { RootState } from '../../modules';\nimport { useHistory } from 'react-router';\n\n\nlet DivWrapper = styled.div`\nwidth:100%;\nmargin: 0 auto;\npadding: 0px;\nbox-sizing: border-box;\n`;\n\nlet DivLoginContainer = styled.div`\nwidth: 100%;\n  min-height: 100vh;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 15px;\n  background: #ebeeef;\n`;\n\nlet DivLoginBox = styled.div`\nwidth: 670px;\nbackground: #fff;\nborder-radius: 10px;\noverflow: hidden;\nposition: relative;\nbox-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);\n`;\nlet DivLoginTitle = styled.div`\n&:first-child{width: 100%;\nposition: relative;\nz-index: 1;\ndisplay: -webkit-box;\ndisplay: -webkit-flex;\ndisplay: -moz-box;\ndisplay: -ms-flexbox;\ndisplay: flex;\nflex-wrap: wrap;\nflex-direction: column;\nalign-items: center;\n\nbackground-repeat: no-repeat;\nbackground-size: cover;\nbackground-position: center;\n\npadding: 70px 15px 74px 15px;\n\n&:before{\n    content: \"\";\n    display: block;\n    position: absolute;\n    z-index: -1;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    background-color: rgba(54,84,99,0.7);\n}    \n}\n`;\n\nlet SpanLoginTitle = styled.span`\nfont-family: Poppins-Bold;\nfont-size: 30px;\ncolor: #fff;\ntext-transform: uppercase;\nline-height: 1.2;\ntext-align: center;\n`;\n\nconst FormLogin = styled.form`\nwidth: 100%;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 43px 88px 93px 190px;\n  box-sizing:border-box;\n`;\n\nconst DivLoginGroup = styled.div`\nwidth: 100%;\n  position: relative;\n  border-bottom: 1px solid #b2b2b2;\n  margin-bottom: 26px;\n`;\n\nconst SpanLoginLabel = styled.span`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #808080;\n  line-height: 1.2;\n  text-align: right;\n  position: absolute;\n  top: 14px;\n  left: -105px;\n  width: 80px;\n`;\nconst InputLogin = styled.input`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #555555;\n  line-height: 1.2;\n  height: 45px;\n  display: block;\n  width: 100%;\n  background: transparent;\n  padding: 0 5px;\n  outline:none;\n  border:none;\n`;\n\nconst SpanLoginFocus = styled.span`\n&:first-child{position: absolute;\n  display: block;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n  &:before{\n    content: \"\";\n    display: block;\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    width:0;\n    height: 2px;\n    transition: all 0.6s;\n    background: #57b846;\n  }\n  ${InputLogin}:focus + &:before{\n    width: 100%;\n  }\n}\n`;\n\nconst DivButtonWrapper = styled.div`\nwidth: 100%;\ndisplay: -webkit-box;\ndisplay: -webkit-flex;\ndisplay: -moz-box;\ndisplay: -ms-flexbox;\ndisplay: flex;\nflex-wrap: wrap;\n`;\n\nconst ButtonLogin = styled.button`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\npadding: 0 20px;\nmin-width: 160px;\nheight: 50px;\nbackground-color: #57b846;\nborder-radius: 25px;\n\nfont-family: Poppins-Regular;\nfont-size: 16px;\ncolor: #fff;\n// line-height: 1.2;\n\ntransition: all 0.4s;\n&:hover{\n    background-color: #555555;\n    cursor:pointer;\n}&:active{\n    background-color: #222222;\n}\n`;\n\n\n//style end\n\nfunction Login() {\n  const history = useHistory();\n  let [username, setUsername] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n  let [isLoginSuccess,setIsLoginSuccess]=useState(true);\n  const dispatch = useDispatch();\n  async function handleLoginButton(e: any) {\n    e.preventDefault();\n    try {\n      const response = await axios.post(`/api/authenticate`,\n        { username: username, password: password },\n        {\n          headers: {\n            'Content-type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n      history.push(\"/\");\n      dispatch(login({userId:'', isLogined:true}))\n      sessionStorage.setItem(\"sessionUser\", JSON.stringify(response.data));\n    } catch (err) {\n      setIsLoginSuccess(false)\n    }\n  }\n\n  return (\n    <div>\n      <DivWrapper>\n        <DivLoginContainer>\n          <DivLoginBox>\n            <DivLoginTitle>\n              <SpanLoginTitle>로그인</SpanLoginTitle>\n            </DivLoginTitle>\n            <FormLogin onSubmit={handleLoginButton}>\n              <DivLoginGroup>\n                <SpanLoginLabel>아이디</SpanLoginLabel>\n                <InputLogin type=\"text\" className=\"logininput\" value={username} onChange={e => setUsername(e.target.value)} />\n                {/* <SpanLoginFocus></SpanLoginFocus>  */}\n              </DivLoginGroup>\n              <DivLoginGroup>\n                <SpanLoginLabel>비밀번호</SpanLoginLabel>\n                <InputLogin type=\"password\" className=\"logininput\" value={password} onChange={e => setPassword(e.target.value)} />\n                {/* <SpanLoginFocus></SpanLoginFocus>  */}\n              </DivLoginGroup>\n                {!isLoginSuccess ? \n                  <div style={{color:'red'}}>\n                    로그인에 실패했습니다.\n                  </div> :\n                  null\n                }\n              <DivButtonWrapper>\n                <ButtonLogin onClick={handleLoginButton}>로그인</ButtonLogin>\n              </DivButtonWrapper>\n            </FormLogin>\n          </DivLoginBox>\n        </DivLoginContainer>\n      </DivWrapper>\n    </div>\n  );\n}\n\nexport default Login;",["128","129"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/Info.tsx",["130","131","132","133","134","135","136","137","138","139","140","141"],"import {\n    CardContent,\n    CardMedia,\n    Divider,\n    Grid,\n    Paper,\n    Collapse,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    makeStyles,\n    GridList,\n    GridListTile,\n    GridListTileBar,\n    Table,\n    TableRow,\n    TableCell,\n    Checkbox,\n    ListItemSecondaryAction,\n    IconButton,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    CircularProgress,\n} from \"@material-ui/core\"\nimport { StarBorder, ExpandLess, ExpandMore, Comment, GetApp } from \"@material-ui/icons\"\n// import { InboxIcon } from '@material-ui/icons/MoveToInbox';\nimport React, { useEffect, useState } from \"react\"\nimport Carousel from \"react-material-ui-carousel\"\nimport axios from \"axios\";\nimport moment from 'moment';\nimport { useHistory } from \"react-router\";\nimport { saveAs } from 'file-saver';\nimport JSZip from \"jszip\";\nimport { promises } from \"fs\";\nimport fileDownload from \"js-file-download\";\n\nconst useStyles = makeStyles(() =>\n({\n    primary: {\n        fontSize: '20px',\n        textAlign: 'center'\n    },\n    nested: {\n        paddingLeft: 4,\n    },\n}),\n);\n\ntype Asset = {\n    assetSeq: number,\n    assetOwner: string,\n    assetOwnerName: string,\n    assetChanger: string,\n    assetChangerName: string,\n    assetTitle: string,\n    assetCreateDate: Date,\n    assetUpdateDate: Date,\n    tags: string,\n    assetCategory: number,\n    assetCategoryName: string,\n    assetFiles: Array<AssetFile>,\n}\ntype AssetFile = {\n    assetSeq: number,\n    assetLocation: string,\n    assetOriginName: string,\n    assetSize: number,\n    assetType: string,\n}\n\ntype MatchParams = {\n    assetSeq: string\n}\n\ntype Category = {\n    categoryId: number,\n    categoryName: string,\n    categoryParent: number,\n    categoryOrder: number\n}\n\nconst Info = (props: MatchParams) => {\n    const sessionUser = sessionStorage.getItem(\"sessionUser\");\n    if (sessionUser) {\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n    }\n    const history = useHistory();\n    const assetSeq: string = props.assetSeq;\n    const classes = useStyles();\n    const [isOpen, setIsOpen] = useState(true);\n    const [assetInfo, setAssetInfo] = useState<Asset>();\n    const [parentCategory, setParentCategory] = useState<string>();\n    const [checked, setChecked] = useState<Array<string>>([]);\n    const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n    const [downloadOpen, setDownloadOpen] = useState<boolean>(false)\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    };\n\n\n\n    useEffect(() => {\n        axios.get(`/api/asset/${assetSeq}`\n        ).then(result => {\n            setAssetInfo(result.data.result);\n            axios.get(`/api/category/list`)\n                .then(response => {\n                    setParentCategory(findParent(result.data.result.assetCategory, response.data.result))\n                })\n        })\n    }, [assetSeq])\n\n    const findParent = (target: number, categories: Category[]) => {\n        let pStr = \"\";\n        categories.forEach(element => {\n            if (element.categoryId == target) {\n                if (element.categoryParent != 0) {\n                    pStr = findParent(element.categoryParent, categories) + '>' + element.categoryName\n                    return\n                } else {\n                    pStr = element.categoryName\n                    return\n                }\n            }\n        });\n        return pStr;\n    }\n\n    const handleToggle = (value: string) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n        setChecked(newChecked);\n    };\n\n    const goModify = () => {\n        history.push(`/modify/${assetSeq}`)\n    }\n\n    const handleDeleteOpen = () => {\n        setDeleteOpen(true)\n    }\n\n    const handleDeleteClose = () => {\n        setDeleteOpen(false)\n    }\n\n    const handleDeleteConfirm = () => {\n        axios.delete(`/api/asset/${assetSeq}`,\n            {\n                params: {\n                    assetOwner: assetInfo.assetOwner\n                }\n            }\n        )\n            .then(response => {\n                history.push(\"/\");\n            })\n    }\n\n    const handleSingleDownload = (fileLocation: string, fileOriginName: string) => () => {\n        axios.get(`/api/download`, {\n            responseType: 'blob',\n            params:{\n                fileLocation\n            }\n        })\n            .then(response => {\n                fileDownload(response.data, fileOriginName);\n            })\n    }\n\n    const handleDownloadClose = () =>{\n        setDownloadOpen(false)\n    }\n\n    const handleMultiDownloadAsZip = () => {\n        const makeZip = new Promise(async (resolve, reject) => {\n            let zip = new JSZip();\n            setDownloadOpen(true)\n            \n            for (let i = 0; i < checked.length; i++) {\n                let fileInfo = checked[i].split(',')\n                await axios.get(`${fileInfo[0]}`,\n                    {\n                        responseType: 'blob',\n                        // onDownloadProgress:ProgressEvent=>{\n                        //     const percentage=Math.round(\n                        //         ProgressEvent.loaded*100/ProgressEvent.total\n                        //     )\n                        //     setProgress(percentage);\n                        //     setWholeProgress(progress/checked.length)\n                        // }\n                    })\n                    .then(response => {\n                        zip.file(fileInfo[1],response.data);\n                    })\n            }\n            resolve(zip)\n        });\n        makeZip.then((value:any)=>{\n            value.generateAsync({ type: \"blob\" })\n            .then(function (content:any) {\n                // see FileSaver.js\n                saveAs(content, assetInfo.assetTitle + \".zip\");\n                setDownloadOpen(false)\n            })\n        })\n    }\n    return (\n        <div style={{ marginTop: 20, padding: 30 }}>\n            {assetInfo &&\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <Carousel\n                            autoPlay={false}\n                            animation={\"slide\"}\n                            indicators={true}\n                            navButtonsAlwaysVisible={true}\n                        >\n                            {assetInfo && assetInfo.assetFiles.map((item, i) => (\n                                <Grid item>\n                                    <CardContent>\n                                        <CardMedia>\n                                            {!item.assetType ?\n                                                <div>\n                                                    <img src={\"/images/unsupportedFile.png\"} alt=\"\" />\n                                                    <GridListTileBar title={\"미리보기가 지원되지 않는 형식\"} />\n                                                </div>\n                                                :\n                                                item.assetType.includes(\"image\") ?\n                                                    <img style={{ maxWidth: '600px',maxHeight:'600px' }} src={item.assetLocation.substring(item.assetLocation.lastIndexOf(\"/uploadedImages\"))} alt=\"\" />\n                                                    : item.assetType.includes(\"video\") ?\n                                                        <video style={{ maxWidth: '600px',maxHeight:'600px' }} controls src={item.assetLocation.substring(item.assetLocation.lastIndexOf(\"/uploadedImages\"))} />\n                                                        :\n                                                        item.assetType.includes(\"audio\") ?\n                                                            <audio controls src={item.assetLocation.substring(item.assetLocation.lastIndexOf(\"/uploadedImages\"))} />\n                                                            : <div>\n                                                                <img src={\"/images/unsupportedFile.png\"} alt=\"\" />\n                                                                <GridListTileBar title={\"미리보기가 지원되지 않는 형식\"} />\n                                                            </div>\n                                            }\n\n                                        </CardMedia>\n                                    </CardContent>\n                                </Grid>\n                            ))}\n                        </Carousel>\n                    </Grid>\n                    <Divider orientation=\"vertical\" flexItem />\n                    <Grid item xs={3}>\n                        <h1>{assetInfo.assetTitle}</h1>\n                        <Table aria-label=\"simple table\">\n                            <TableRow>\n                                <TableCell align=\"right\" style={{ color: \"grey\" }}>등록일 : {moment(assetInfo.assetCreateDate).format('YYYY-MM-DD HH:mm:ss')}\n                                    {assetInfo.assetCreateDate !== assetInfo.assetUpdateDate ? <><br />수정일 : {moment(assetInfo.assetUpdateDate).format('YYYY-MM-DD HH:mm:ss')}</> : null}</TableCell>\n\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>작성자 : {assetInfo.assetOwnerName}{assetInfo.assetChanger && <><br />최종 수정자 : {assetInfo.assetChangerName}</>}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    카테고리 : {parentCategory}\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    태그 : {assetInfo.tags}\n                                </TableCell>\n                            </TableRow>\n                        </Table>\n                        <Button onClick={goModify} color=\"primary\">수정</Button>\n                        <Button onClick={handleDeleteOpen} color=\"secondary\">삭제</Button>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Divider />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ListItem button onClick={handleClick}>\n                            <ListItemText primary=\"파일 리스트\" classes={{ primary: classes.primary }} />\n                            {isOpen ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding>\n                                {/* <ListItem key=\"download\" role=\"selected-download\" style={{ height: 42, textAlign: 'center' }}>\n                                    <ListItemText>\n                                        <Button endIcon={<GetApp />} size=\"large\" onClick={handleMultiDownloadAsZip}>선택파일 다운로드</Button>\n                                    </ListItemText>\n                                </ListItem> */}\n                                {assetInfo.assetFiles.map((file, i) => {\n                                    const labelId = `checkbox-list-label-${i}`;\n                                    const fileLocation = file.assetLocation.substring(file.assetLocation.lastIndexOf(\"/uploadedImages\"));\n                                    return (\n                                        <ListItem key={i} role={undefined} dense button onClick={handleToggle(`${fileLocation},${file.assetOriginName}`)}>\n                                            {/* <ListItemIcon>\n                                                <Checkbox\n                                                    edge=\"start\"\n                                                    checked={checked.indexOf(`${fileLocation},${file.assetOriginName}`) !== -1}\n                                                    tabIndex={-1}\n                                                    disableRipple\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                /> \n                                            </ListItemIcon> */}\n                                            <ListItemText id={labelId} primary={`${file.assetOriginName}`} />\n                                            <ListItemSecondaryAction>\n                                                <IconButton edge=\"end\" aria-label=\"comments\" onClick={handleSingleDownload(file.assetLocation, file.assetOriginName)}>\n                                                    <GetApp />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    );\n                                })}\n                            </List>\n                        </Collapse>\n                    </Grid>\n                </Grid>\n\n            }\n            <Dialog\n                open={deleteOpen}\n                onClose={handleDeleteClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"삭제하시겠습니까?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        삭제된 게시글은 복구되지 않습니다.\n                     </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDeleteConfirm} color=\"secondary\">\n                        확인\n                    </Button>\n                    <Button onClick={handleDeleteClose} color=\"primary\">\n                        취소\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={downloadOpen}\n                onClose={handleDownloadClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"다운로드를 준비중입니다.\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\" style={{textAlign:'center'}}>\n                         <CircularProgress />\n                     </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDownloadClose} color=\"secondary\">\n                        확인\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\nexport default Info","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/Upload.tsx",["142","143","144","145","146","147","148","149","150","151","152","153"],"import React, { useState, FormEvent, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport DropZone from './DropZone';\nimport { useHistory } from 'react-router';\nimport arrayToTree from 'array-to-tree';\nimport { ExpandMore, ChevronRight } from '@material-ui/icons'\nimport { Avatar, Box, Button, CircularProgress, colors, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, LinearProgress, List, ListItem, ListItemAvatar, ListItemText, makeStyles, Typography } from '@material-ui/core';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\n//style \n\nlet DivWrapper = styled.div`\nwidth:100%;\nmargin: 0 auto;\npadding: 0px;\njustify-content: center;\nalign-items: center;\nbox-sizing: border-box;\n`;\n\nlet DivContainer = styled.div`\nwidth: 100%;\nmin-height: 100vh;\ndisplay:block;\n//flex-wrap: wrap;\nmargin-right: auto;\nmargin-left: auto;\npadding-left: 15px;\npadding-right: 15px;\npadding-top: 15px;\n// justify-content: center;\n// align-items: center;\n// padding: 15px;\nbackground: #ebeeef;\n`;\n\nlet DivTitleContainer = styled.div`\n// width:100%;\ndisplay:flex;\nmargin-bottom: 20px;\nborder-bottom: 1px solid #eaeaea;\n`;\n\nlet DivBox = styled.div`\nmax-width: 80%;\n// min-width: 670px;\nmargin: auto;\nbackground: #fff;\n// padding:10px;\n// overflow: hidden;\nposition: relative;\npadding: 20px;\nborder-radius: 3px;\nbox-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px;\n`;\n\nconst DivInputGroup = styled.div`\nwidth: 100%;\n  position: relative;\n  border-bottom: 1px solid #b2b2b2;\n  margin-bottom: 26px;\n`;\n\nconst DivTagGroup = styled.div`\nwidth:100%;\nposition:relative;\nmargin-bottom:26px;\ndisplay:block;\n`;\n\nconst SpanInputLabel = styled.span`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #808080;\n  line-height: 1.2;\n  text-align: right;\n  position: absolute;\n  top: 14px;\n  left: -105px;\n  width: 80px;\n`;\nconst InputText = styled.input`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #555555;\n  line-height: 1.2;\n  height: 45px;\n  display: block;\n  width: 100%;\n  background: transparent;\n  padding: 0 5px;\n  outline:none;\n  border:none;\n`;\nconst FormLogin = styled.form`\nwidth: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 43px 88px 93px 150px;\n`;\n\nconst SpanTag = styled.span`\ndisplay:inline-block;\nbackground:#4abdff;\nmargin-right:5px;\nmargin-top:2px;\nmargin-bottom:2px;\npadding:5px 7px 5px 7px;\nborder-radius:4px;\ncolor:#fff;\n`;\n\nconst SpanTimes = styled.span`\nmargin: 3px;\nmargin-left 5px;\nfont-weight: bolder;\ncolor:#fff;\n&:hover{\n    cursor:pointer;\n    color:#cccccc;\n}\n&:active{\n    color:#7a7a7a;\n}\n`;\n\n\n//style end\nconst Upload = () => {\n    const history = useHistory()\n    let sessionUser = sessionStorage.getItem(\"sessionUser\");\n    const user = useSelector((state: RootState) => state.member)\n    if (sessionUser) {\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n    }\n    let [title, setTitle] = useState<string>();\n    let [currentInputTag, setCurrentInputTag] = useState<string>('');\n    let [tags, setTags] = useState<Array<string>>([]);\n    let [filesState, setFilesState] = useState<Array<File>>([]);\n    let [categories, setCategories] = useState([]);\n    let [selectedCategory, setSelectedCategory] = useState<string>();\n    let [categoriesHavingChild, setCategoriesHavingChild] = useState<Array<string>>();\n    let [isTagDuplicated, setIsTagDuplicated] = useState<boolean>(false);\n    let [alertOpen, setAlertOpen] = useState<boolean>(false);\n    let [uploadOpen, setUploadOpen] = useState<boolean>(false);\n    let [progresses, setProgresses] = useState<Array<number>>([0]);\n    let [newProgresses, setNewProgresses] = useState<Array<number>>([0]);\n    const CHUNK_SIZE: number = 1024 * 1024 * 10;//10MB\n    let temp: number[]\n\n    useEffect(() => {\n        sessionUser = sessionStorage.getItem(\"sessionUser\");\n        if (sessionUser) {\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n        }\n        axios.get(`/api/category/list`)\n            .then(response => {\n                setCategories(arrayToTree(response.data.result, { parentProperty: 'categoryParent', customID: 'categoryId' }))\n            })\n    }, [user])\n    useEffect(() => {\n        let tempArray: Array<string> = [];\n        async function getParents(array: Array<TreeViews>) {\n            await array.map((node: TreeViews) => {\n                if (node.children) {\n                    tempArray.push(node.categoryId + '');\n                    getParents(node.children);\n                }\n            });\n            setCategoriesHavingChild(tempArray)\n        };\n        getParents(categories);\n    }, [categories])\n\n    useEffect(() => {\n        setProgresses(pre => {\n            return new Array(filesState.length).fill(0)\n        })\n        setNewProgresses(pre => {\n            return new Array(filesState.length).fill(0)\n        })\n    }, [filesState])\n\n    interface TreeViews {\n        children?: TreeViews[];\n        categoryName: string;\n        categoryId: string;\n    }\n    interface CategoryProps {\n        category: TreeViews\n    }\n\n    const renderTrees = (nodes: TreeViews) => (\n        <TreeItem key={nodes.categoryId} nodeId={nodes.categoryId + ''} label={nodes.categoryName} classes={{ label: classes.label }}>\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTrees(node)) : null}\n        </TreeItem>\n    );\n\n    const Category = ({ category }: CategoryProps) => {\n        useEffect(() => {\n\n        }, [category]);\n        return renderTrees(category);\n    }\n\n    const handleToggle = (event: any, nodeIds: string[]) => {\n        event.preventDefault()\n    };\n    const handleNodeSelect = (event: any, nodeId: React.SetStateAction<string>) => {\n        setSelectedCategory(nodeId)\n    };\n\n    const handleAlertOpen = () => {\n        setAlertOpen(true)\n    }\n    const handleAlertClose = () => {\n        setAlertOpen(false)\n    }\n    const handlerUploadOpen = () => {\n        setUploadOpen(true);\n    }\n    const handlerUploadClose = () => {\n        setUploadOpen(false);\n    }\n    const fileUpload = (seq: number) => {\n        handlerUploadOpen();\n\n        (async function () {\n            for (let index = 0; index < filesState.length; index++) {\n                if (filesState[index].size > CHUNK_SIZE) {\n                    const chunks = fileSlicer(filesState[index])\n                    let data = {\n                        \"assetSeq\": seq,\n                        \"assetOriginName\": filesState[index].name,\n                        \"assetSize\": filesState[index].size,\n                        \"assetUuidName\": '',\n                        \"isLastChunk\": false,\n                        \"location\": '',\n                        \"assetType\": filesState[index].type,\n                        \"category\": selectedCategory\n                    }\n                    const result = await axios.post(`/api/prelargefile`,\n                        data\n                    )\n                    data[\"assetUuidName\"] = result.data.result.assetUuidName;\n                    data[\"location\"] = result.data.result.location;\n                    for (let i = 0; i < chunks.length; i++) {\n                        if ((i + 1) === chunks.length) {\n                            data[\"isLastChunk\"] = true;\n                        }\n                        try {\n                            setProgresses(pre => { pre[index] = Math.round(100 / chunks.length * i); return pre })\n                            setNewProgresses([...progresses])\n                            const result = await axios.post(`/api/largefile`,\n                                chunks[i],\n                                {\n                                    params: data,\n                                    headers: { 'Content-Type': 'multipart/form-data' }\n                                }\n                            )\n                        } catch (err) {\n                            console.log(err);\n                        }\n                    }\n                } else {\n                    try {\n                        const formData = new FormData();\n                        formData.append(\"file\", filesState[index]);\n                        formData.append(\"assetSeq\", '' + seq);\n                        formData.append(\"assetType\", filesState[index].type);\n                        formData.append(\"category\", selectedCategory)\n                        await axios.post(`/api/file`,\n                            formData,\n                            {\n                                onUploadProgress: ProgressEvent => {\n                                    const percentage = Math.round(\n                                        ProgressEvent.loaded * 100 / ProgressEvent.total\n                                    )\n                                    setProgresses(pre => { pre[index] = percentage; return pre })\n                                    setNewProgresses([...progresses])\n                                }\n                            }\n                        )\n\n                    }\n                    catch (err) {\n\n                    }\n                }\n                if (index === filesState.length - 1) {\n                    await fileUploadComplete(seq)\n                }\n            }\n            // }\n        })();\n    }\n   \n    const fileUploadComplete = async (seq: number) => {\n        try {\n            await axios.post(`/api/complete`,\n                { assetSeq: seq, tags: tags.toString() },\n                {\n                    headers: {\n                        'Content-type': 'application/json',\n                        'Access-Control-Allow-Origin': '*'\n                    }\n                })\n            setFilesState([]);\n\n            history.push('/')\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n\n    const submitFiles = async (e: FormEvent) => {\n        e.preventDefault();\n        if (filesState.length != 0 && title && selectedCategory) {\n            let data = { assetTitle: title, assetCategory: selectedCategory }\n            try {\n                const response = await axios.post(`/api/asset`,\n                    data,\n                    {\n                        headers: {\n                            'Content-type': 'application/json',\n                            'Access-Control-Allow-Origin': '*'\n                        }\n                    });\n                // setAssetSeq();\n\n                fileUpload(response.data.result.assetSeq);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        } else {\n            handleAlertOpen();\n        }\n    }\n\n    const addTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\" || e.key === \"Tab\") {\n            e.preventDefault();\n            let inputTag = currentInputTag.trim();\n            if (inputTag !== \"\") {\n                if (tags.filter(tag => tag === inputTag).length <= 0) {\n                    setIsTagDuplicated(false);\n                    let tmp: Array<string> = [...tags].concat(currentInputTag);\n                    setTags(tmp);\n                } else {\n                    setIsTagDuplicated(true)\n                }\n            }\n            setCurrentInputTag('');\n        }\n    }\n\n    const removeTag = (targetTag: string) => {\n        const targetTagIndex = tags.findIndex(e => e === targetTag);\n        tags.splice(targetTagIndex, 1);\n        setTags([...tags]);\n    }\n\n    // 파일을 청크로 나누는 함수\n    const fileSlicer = (target: File) => {\n        let chunks = [];\n        let chunkIndex = 0; // 파일 자를 시작 위치\n        const CHUNK_COUNT = Math.ceil(target.size / CHUNK_SIZE);//청크갯수\n        for (let i = 1; i <= CHUNK_COUNT; i++) {\n            if (i === CHUNK_COUNT)\n                chunks.push(target.slice(chunkIndex))\n            else\n                chunks.push(target.slice(chunkIndex, chunkIndex + CHUNK_SIZE))\n            chunkIndex += CHUNK_SIZE;\n        }\n        return chunks\n    }\n    const useStyles = makeStyles({\n        root: {\n            height: 240,\n            flexGrow: 1,\n            maxWidth: 400,\n            display: 'contents',\n        },\n        label: {\n            textAlign: 'left'\n        },\n    });\n    const classes = useStyles();\n    return (\n        <>\n\n            <DivWrapper>\n                <DivContainer>\n                    <DivBox>\n                        <DivTitleContainer>\n                            <h2 className=\"h3 mb-2 text-gray-800\">업로드</h2>\n                        </DivTitleContainer>\n                        <FormLogin\n                        // onSubmit={submitFiles}\n                        >\n                            <DivInputGroup>\n                                <SpanInputLabel>제목</SpanInputLabel>\n                                <InputText type=\"text\" value={title} onChange={(e) => { setTitle(e.target.value) }} className=\"logininput\" />\n                            </DivInputGroup>\n\n                            <DivInputGroup>\n                                <SpanInputLabel>카테고리</SpanInputLabel>\n                                {categories.length > 0 ? (\n                                    <TreeView\n                                        onNodeToggle={handleToggle}\n                                        onNodeSelect={handleNodeSelect}\n                                        className={classes.root}\n                                        // defaultCollapseIcon={<ExpandMore />}\n                                        // defaultExpandIcon={<ChevronRight />}\n                                        expanded={categoriesHavingChild}\n                                    >\n                                        <div>\n                                            {categories.map((category: TreeViews) => {\n                                                return <Category key={category.categoryId} category={category} />\n                                            })}\n                                        </div>\n                                    </TreeView>\n                                ) :\n                                    (<CircularProgress />)\n                                }\n                            </DivInputGroup>\n\n\n                            <DivInputGroup>\n                                <SpanInputLabel>태그</SpanInputLabel>\n                                <InputText type=\"text\" value={currentInputTag} onChange={(e) => { setCurrentInputTag(e.target.value) }} onKeyPress={(e) => { addTag(e) }} placeholder=\"태그 입력 후 엔터\" />\n                            </DivInputGroup>\n                            <DivTagGroup>\n                                {\n                                    isTagDuplicated ?\n                                        <div style={{ color: 'red' }}>\n                                            중복된 태그입니다.\n                                    </div> : null\n                                }\n\n                                {tags.map((data, i) =>\n                                    <SpanTag key={i}>{data}<SpanTimes onClick={() => { removeTag(data) }}>×</SpanTimes></SpanTag>\n                                )}\n                            </DivTagGroup>\n                            <DivInputGroup>\n                                <DropZone filesState={filesState} setFilesState={setFilesState} />\n                            </DivInputGroup>\n                            <DivTagGroup>\n                                <Button size=\"large\" color=\"primary\" onClick={submitFiles}>저장</Button>\n                            </DivTagGroup>\n\n                        </FormLogin>\n                    </DivBox>\n                </DivContainer>\n            </DivWrapper>\n\n            <Dialog\n                open={alertOpen}\n                onClose={handleAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"입력정보를 확인해주세요\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        (제목, 카테고리, 파일첨부는 필수요소 입니다.)\n          </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color=\"primary\">\n                        확인\n          </Button>\n                </DialogActions>\n            </Dialog>\n\n\n            <Dialog\n                open={uploadOpen}\n                // onClose={handlerUploadClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"업로드\"}</DialogTitle>\n                <DialogContent>\n                    <List className={classes.root}>\n                        {filesState.map((file, mapIndex) =>\n                            <ListItem alignItems=\"flex-start\">\n                                <ListItemText\n                                    primary={file.name}\n                                    secondary={\n                                        <React.Fragment>\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                <Box width=\"100%\" mr={1}>\n                                                    <LinearProgress variant=\"determinate\" value={newProgresses[mapIndex]} />\n                                                </Box>\n                                                <Box minWidth={35}>\n                                                    <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(newProgresses[mapIndex])}%`}</Typography>\n                                                </Box>\n                                            </Box>\n                                        </React.Fragment>\n                                    }\n                                />\n                            </ListItem>\n                        )}\n\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handlerUploadClose} color=\"primary\">\n                        창닫기\n                     </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default Upload;",["154","155"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/index.tsx",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/ModInfo.tsx",["156","157","158","159","160","161","162"],"import React, { useState, FormEvent, useEffect } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport { useHistory } from 'react-router';\nimport arrayToTree from 'array-to-tree';\nimport { ExpandMore, ChevronRight, Comment, Delete } from '@material-ui/icons'\nimport { Button, CircularProgress, colors, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles } from '@material-ui/core';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\n//style \n\nlet DivWrapper = styled.div`\nwidth:100%;\nmargin: 0 auto;\npadding: 0px;\njustify-content: center;\nalign-items: center;\nbox-sizing: border-box;\n`;\n\nlet DivContainer = styled.div`\nwidth: 100%;\nmin-height: 100vh;\ndisplay:block;\n//flex-wrap: wrap;\nmargin-right: auto;\nmargin-left: auto;\npadding-left: 15px;\npadding-right: 15px;\npadding-top: 15px;\n// justify-content: center;\n// align-items: center;\n// padding: 15px;\nbackground: #ebeeef;\n`;\n\nlet DivTitleContainer = styled.div`\n// width:100%;\ndisplay:flex;\nmargin-bottom: 20px;\nborder-bottom: 1px solid #eaeaea;\n`;\n\nlet DivBox = styled.div`\nmax-width: 80%;\n// min-width: 670px;\nmargin: auto;\nbackground: #fff;\n// padding:10px;\n// overflow: hidden;\nposition: relative;\npadding: 20px;\nborder-radius: 3px;\nbox-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px;\n`;\n\nconst DivInputGroup = styled.div`\nwidth: 100%;\n  position: relative;\n  border-bottom: 1px solid #b2b2b2;\n  margin-bottom: 26px;\n`;\n\nconst DivTagGroup = styled.div`\nwidth:100%;\nposition:relative;\nmargin-bottom:26px;\ndisplay:block;\n`;\n\nconst SpanInputLabel = styled.span`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #808080;\n  line-height: 1.2;\n  text-align: right;\n  position: absolute;\n  top: 14px;\n  left: -105px;\n  width: 80px;\n`;\nconst InputText = styled.input`\nfont-family: Poppins-Regular;\n  font-size: 15px;\n  color: #555555;\n  line-height: 1.2;\n  height: 45px;\n  display: block;\n  width: 100%;\n  background: transparent;\n  padding: 0 5px;\n  outline:none;\n  border:none;\n`;\nconst FormLogin = styled.form`\nwidth: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 43px 88px 93px 150px;\n`;\n\nconst SpanTag = styled.span`\ndisplay:inline-block;\nbackground:#4abdff;\nmargin-right:5px;\nmargin-top:2px;\nmargin-bottom:2px;\npadding:5px 7px 5px 7px;\nborder-radius:4px;\ncolor:#fff;\n`;\n\nconst SpanTimes = styled.span`\nmargin: 3px;\nmargin-left 5px;\nfont-weight: bolder;\ncolor:#fff;\n&:hover{\n    cursor:pointer;\n    color:#cccccc;\n}\n&:active{\n    color:#7a7a7a;\n}\n`;\n\ntype MatchParams = {\n    assetSeq: string\n}\n\n//style end\nconst ModInfo = (props: MatchParams) => {\n    const history = useHistory()\n    let sessionUser = sessionStorage.getItem(\"sessionUser\");\n    const user = useSelector((state: RootState) => state.member)\n    if (sessionUser) {\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n    }\n\n    const assetSeq: string = props.assetSeq;\n\n    let [fileList, setFileList] = useState<Array<AssetFile>>();\n    let [title, setTitle] = useState<string>();\n    let [currentInputTag, setCurrentInputTag] = useState<string>('');\n    let [tags, setTags] = useState<Array<string>>([]);\n    let [categories, setCategories] = useState([]);\n    let [selectedCategory, setSelectedCategory] = useState<string>();\n    let [categoriesHavingChild, setCategoriesHavingChild] = useState<Array<string>>();\n    let [isTagDuplicated, setIsTagDuplicated] = useState<boolean>(false);\n    let [alertOpen, setAlertOpen] = useState<boolean>(false);\n    let [fileDeleteAlertOpen, setFileDeleteAlertOpen] = useState<boolean>(false)\n    let [deleteTargetFileIndex, setDeleteTargetFileIndex] = useState<number>();\n\n    let [assetInfo, setAssetInfo] = useState<Asset>();\n\n    useEffect(() => {\n        sessionUser = sessionStorage.getItem(\"sessionUser\");\n        if (sessionUser) {\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + JSON.parse(sessionUser).token;\n        }\n        axios.get(`/api/category/list`)\n            .then(response => {\n                setCategories(arrayToTree(response.data.result, { parentProperty: 'categoryParent', customID: 'categoryId' }))\n            })\n    }, [user])\n\n    useEffect(() => {\n        axios.get(`/api/asset/${assetSeq}`)\n            .then(result => {\n                let data: Asset = result.data.result;\n                setAssetInfo(data);\n                setTitle(data.assetTitle);\n                setFileList(data.assetFiles);\n                if(data.tags)\n                    setTags(data.tags.split(','))\n                setSelectedCategory(data.assetCategory + '')\n            })\n    }, [assetSeq])\n\n    useEffect(() => {\n        let tempArray: Array<string> = [];\n        async function getParents(array: Array<TreeViews>) {\n            await array.map((node: TreeViews) => {\n                if (node.children) {\n                    tempArray.push(node.categoryId + '');\n                    getParents(node.children);\n                }\n            });\n            setCategoriesHavingChild(tempArray)\n        };\n        getParents(categories);\n    }, [categories])\n    interface TreeViews {\n        children?: TreeViews[];\n        categoryName: string;\n        categoryId: string;\n    }\n\n    interface CategoryProps {\n        category: TreeViews\n    }\n    type Asset = {\n        assetSeq: number,\n        assetOwner: string,\n        assetOwnerName: string,\n        assetChanger: string,\n        assetChangerName: string,\n        assetTitle: string,\n        assetCreateDate: Date,\n        assetUpdateDate: Date,\n        tags: string,\n        assetCategory: number,\n        assetCategoryName: string,\n        assetFiles: Array<AssetFile>,\n    }\n    type AssetFile = {\n        assetSeq: number,\n        assetLocation: string,\n        assetOriginName: string,\n        assetSize: number,\n        assetType: string,\n    }\n\n    const renderTrees = (nodes: TreeViews) => (\n        <TreeItem key={nodes.categoryId} nodeId={nodes.categoryId + ''} label={nodes.categoryName} classes={{ label: classes.label }}>\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTrees(node)) : null}\n        </TreeItem>\n    );\n\n    const Category = ({ category }: CategoryProps) => {\n        useEffect(() => {\n\n        }, [category]);\n        return renderTrees(category);\n    }\n\n    const handleToggle = (event: any, nodeIds: string[]) => {\n        event.preventDefault()\n    };\n    const handleNodeSelect = (event: any, nodeId: React.SetStateAction<string>) => {\n        setSelectedCategory(nodeId)\n    };\n\n    const handleCancel = () => {\n        history.goBack();\n    }\n\n    const handleAlertOpen = () => {\n        setAlertOpen(true)\n    }\n    const handleAlertClose = () => {\n        setAlertOpen(false)\n    }\n\n    const handleFileDeleteAlertClose = () => {\n        setFileDeleteAlertOpen(false);\n    }\n\n    const handleFileDeleteAlertOpen = (i: number) => () => {\n        setDeleteTargetFileIndex(i);\n        setFileDeleteAlertOpen(true)\n    }\n\n    const handleFileDelete = () => {\n        console.log(fileList[deleteTargetFileIndex])\n        axios.delete(`/api/file`,\n            {\n                params: {\n                    assetLocation:fileList[deleteTargetFileIndex].assetLocation\n                },\n                headers: {\n                    'Content-type': 'application/json',\n                }\n            }\n        ).then(result => {\n            let tempFileList = [...fileList]\n            tempFileList.splice(deleteTargetFileIndex, 1)\n            setFileList([...tempFileList]);\n            setDeleteTargetFileIndex(null)\n            setFileDeleteAlertOpen(false)\n        })\n    }\n\n    const addTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\" || e.key === \"Tab\") {\n            e.preventDefault();\n            let inputTag = currentInputTag.trim();\n            if (inputTag !== \"\") {\n                if (tags.filter(tag => tag.trim() === inputTag).length <= 0) {\n                    setIsTagDuplicated(false);\n                    axios.post(`/api/tag`, null,\n                        { params: { assetTag: inputTag, assetSeq: assetSeq } }\n                    ).then(result => {\n                        if(result.data.result)\n                            setTags(result.data.result.split(','))\n                        else\n                            setTags([])\n                    })\n                } else {\n                    setIsTagDuplicated(true)\n                }\n            }\n            setCurrentInputTag('');\n        }\n    }\n\n    const removeTag = (targetTag: string) => {\n        axios.delete(`/api/tag`,\n            { params: { assetTag: targetTag.trim(), assetSeq: assetSeq } }\n        ).then(result => {\n            if(result.data.result)\n                setTags(result.data.result.split(','))\n            else\n                setTags([])\n        })\n    }\n\n    const submitModify = (e: FormEvent) => {\n        e.preventDefault();\n        const data = {\n            assetSeq: assetSeq,\n            assetTitle: title,\n            assetCategory: selectedCategory\n        }\n        console.log(data)\n        axios.put(`/api/asset`,\n            data\n        ).then(result=>{\n            history.goBack();\n        })\n    }\n\n    const useStyles = makeStyles({\n        root: {\n            height: 240,\n            flexGrow: 1,\n            maxWidth: 400,\n            display: 'contents',\n        },\n        label: {\n            textAlign: 'left'\n        },\n    });\n    const classes = useStyles();\n    return (\n        <>\n            {assetInfo &&\n                <DivWrapper>\n                    <DivContainer>\n                        <DivBox>\n                            <DivTitleContainer>\n                                <h2 className=\"h3 mb-2 text-gray-800\">수정</h2>\n                            </DivTitleContainer>\n                            <FormLogin>\n                                <DivInputGroup>\n                                    <SpanInputLabel>제목</SpanInputLabel>\n                                    <InputText type=\"text\" value={title} onChange={(e) => { setTitle(e.target.value) }} className=\"logininput\" />\n                                </DivInputGroup>\n\n                                <DivInputGroup>\n                                    <SpanInputLabel>카테고리</SpanInputLabel>\n                                    {categories.length > 0 ? (\n                                        <TreeView\n                                            onNodeToggle={handleToggle}\n                                            onNodeSelect={handleNodeSelect}\n                                            className={classes.root}\n                                            expanded={categoriesHavingChild}\n                                            defaultSelected={assetInfo.assetCategory + ''}\n                                        >\n                                            <div>\n                                                {categories.map((category: TreeViews) => {\n                                                    return <Category key={category.categoryId} category={category} />\n                                                })}\n                                            </div>\n                                        </TreeView>\n                                    ) :\n                                        (<CircularProgress />)\n                                    }\n                                </DivInputGroup>\n\n\n                                <DivInputGroup>\n                                    <SpanInputLabel>태그</SpanInputLabel>\n                                    <InputText type=\"text\" value={currentInputTag} onChange={(e) => { setCurrentInputTag(e.target.value) }} onKeyPress={(e) => { addTag(e) }} placeholder=\"태그 입력 후 엔터\" />\n                                </DivInputGroup>\n                                <DivTagGroup>\n                                    {\n                                        isTagDuplicated ?\n                                            <div style={{ color: 'red' }}>\n                                                중복된 태그입니다.\n                                    </div> : null\n                                    }\n\n                                    {tags.map((data, i) =>\n                                        <SpanTag key={i}>{data}<SpanTimes onClick={() => { removeTag(data) }}>×</SpanTimes></SpanTag>\n                                    )}\n                                </DivTagGroup>\n                                <DivInputGroup>\n                                    {fileList && <List >\n                                        {fileList.map((value, i) => {\n                                            const labelId = `checkbox-list-label-${i}`;\n                                            return (\n                                                <ListItem key={i} role={undefined} dense >\n\n                                                    <ListItemText id={labelId} primary={value.assetOriginName} />\n                                                    <ListItemSecondaryAction>\n                                                        <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleFileDeleteAlertOpen(i)}>\n                                                            <Delete />\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction>\n                                                </ListItem>\n                                            );\n                                        })}\n                                    </List>}\n                                </DivInputGroup>\n                                <DivTagGroup>\n                                    <Button color=\"primary\" onClick={submitModify}>저장</Button>\n                                    <Button color=\"secondary\" onClick={handleCancel}>취소</Button>\n                                </DivTagGroup>\n\n                            </FormLogin>\n                        </DivBox>\n                    </DivContainer>\n                </DivWrapper>\n            }\n            <Dialog\n                open={alertOpen}\n                onClose={handleAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"입력정보를 확인해주세요\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        (제목, 카테고리, 파일첨부는 필수요소 입니다.)\n          </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color=\"primary\">\n                        확인\n          </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={fileDeleteAlertOpen}\n                onClose={handleFileDeleteAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"파일을 삭제하시겠습니까?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        삭제된 파일은 복구할 수 없습니다.\n          </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleFileDelete} color=\"secondary\">\n                        확인\n          </Button>\n                    <Button onClick={handleFileDeleteAlertClose} color=\"primary\">\n                        취소\n          </Button>\n                </DialogActions>\n            </Dialog>\n\n        </>\n    )\n}\n\nexport default ModInfo;","/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/modify/index.tsx",[],["163","164"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/commons/SearchWindow.tsx",["165","166","167","168","169","170","171","172","173"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/reportWebVitals.ts",[],["174","175"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/detail/index.tsx",[],["176","177"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/fileList.ts",[],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/components/upload/DropZone.tsx",["178","179","180","181","182","183","184","185","186","187","188"],"/Users/ujaelam/Documents/Mission2/project/Mission2/frontend2/src/modules/member.ts",[],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"189","replacedBy":"193"},{"ruleId":"191","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":3,"column":19,"nodeType":"197","messageId":"198","endLine":3,"endColumn":27},{"ruleId":"195","severity":1,"message":"199","line":8,"column":8,"nodeType":"197","messageId":"198","endLine":8,"endColumn":14},{"ruleId":"195","severity":1,"message":"200","line":12,"column":8,"nodeType":"197","messageId":"198","endLine":12,"endColumn":14},{"ruleId":"201","severity":1,"message":"202","line":23,"column":8,"nodeType":"203","endLine":23,"endColumn":14,"suggestions":"204"},{"ruleId":"195","severity":1,"message":"205","line":17,"column":46,"nodeType":"197","messageId":"198","endLine":17,"endColumn":52},{"ruleId":"195","severity":1,"message":"206","line":17,"column":54,"nodeType":"197","messageId":"198","endLine":17,"endColumn":67},{"ruleId":"195","severity":1,"message":"207","line":17,"column":69,"nodeType":"197","messageId":"198","endLine":17,"endColumn":82},{"ruleId":"195","severity":1,"message":"208","line":17,"column":84,"nodeType":"197","messageId":"198","endLine":17,"endColumn":101},{"ruleId":"195","severity":1,"message":"209","line":17,"column":103,"nodeType":"197","messageId":"198","endLine":17,"endColumn":114},{"ruleId":"195","severity":1,"message":"210","line":17,"column":127,"nodeType":"197","messageId":"198","endLine":17,"endColumn":150},{"ruleId":"195","severity":1,"message":"211","line":176,"column":10,"nodeType":"197","messageId":"198","endLine":176,"endColumn":13},{"ruleId":"195","severity":1,"message":"212","line":176,"column":15,"nodeType":"197","messageId":"198","endLine":176,"endColumn":21},{"ruleId":"201","severity":1,"message":"213","line":197,"column":5,"nodeType":"203","endLine":197,"endColumn":14,"suggestions":"214"},{"ruleId":"201","severity":1,"message":"215","line":200,"column":19,"nodeType":"216","endLine":200,"endColumn":56},{"ruleId":"217","severity":1,"message":"218","line":217,"column":41,"nodeType":"219","messageId":"220","endLine":217,"endColumn":43},{"ruleId":"221","severity":1,"message":"222","line":289,"column":34,"nodeType":"223","messageId":"224","endLine":289,"endColumn":36},{"ruleId":"225","severity":1,"message":"226","line":323,"column":9,"nodeType":"197","messageId":"227","endLine":323,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":337,"column":14,"nodeType":"223","messageId":"224","endLine":337,"endColumn":16},{"ruleId":"195","severity":1,"message":"228","line":12,"column":3,"nodeType":"197","messageId":"198","endLine":12,"endColumn":8},{"ruleId":"195","severity":1,"message":"229","line":13,"column":3,"nodeType":"197","messageId":"198","endLine":13,"endColumn":10},{"ruleId":"195","severity":1,"message":"230","line":14,"column":3,"nodeType":"197","messageId":"198","endLine":14,"endColumn":13},{"ruleId":"195","severity":1,"message":"231","line":18,"column":10,"nodeType":"197","messageId":"198","endLine":18,"endColumn":30},{"ruleId":"195","severity":1,"message":"232","line":20,"column":22,"nodeType":"197","messageId":"198","endLine":20,"endColumn":36},{"ruleId":"195","severity":1,"message":"233","line":20,"column":38,"nodeType":"197","messageId":"198","endLine":20,"endColumn":59},{"ruleId":"195","severity":1,"message":"234","line":23,"column":17,"nodeType":"197","messageId":"198","endLine":23,"endColumn":33},{"ruleId":"195","severity":1,"message":"235","line":23,"column":46,"nodeType":"197","messageId":"198","endLine":23,"endColumn":52},{"ruleId":"201","severity":1,"message":"236","line":110,"column":6,"nodeType":"203","endLine":110,"endColumn":15,"suggestions":"237"},{"ruleId":"221","severity":1,"message":"238","line":140,"column":84,"nodeType":"223","messageId":"224","endLine":140,"endColumn":86},{"ruleId":"221","severity":1,"message":"222","line":140,"column":94,"nodeType":"223","messageId":"224","endLine":140,"endColumn":96},{"ruleId":"221","severity":1,"message":"238","line":146,"column":86,"nodeType":"223","messageId":"224","endLine":146,"endColumn":88},{"ruleId":"221","severity":1,"message":"222","line":146,"column":96,"nodeType":"223","messageId":"224","endLine":146,"endColumn":98},{"ruleId":"221","severity":1,"message":"222","line":148,"column":66,"nodeType":"223","messageId":"224","endLine":148,"endColumn":68},{"ruleId":"195","severity":1,"message":"239","line":2,"column":8,"nodeType":"197","messageId":"198","endLine":2,"endColumn":15},{"ruleId":"195","severity":1,"message":"240","line":2,"column":23,"nodeType":"197","messageId":"198","endLine":2,"endColumn":34},{"ruleId":"195","severity":1,"message":"241","line":5,"column":8,"nodeType":"197","messageId":"198","endLine":5,"endColumn":14},{"ruleId":"195","severity":1,"message":"242","line":6,"column":10,"nodeType":"197","messageId":"198","endLine":6,"endColumn":19},{"ruleId":"195","severity":1,"message":"243","line":127,"column":7,"nodeType":"197","messageId":"198","endLine":127,"endColumn":21},{"ruleId":"189","replacedBy":"244"},{"ruleId":"191","replacedBy":"245"},{"ruleId":"195","severity":1,"message":"228","line":6,"column":5,"nodeType":"197","messageId":"198","endLine":6,"endColumn":10},{"ruleId":"195","severity":1,"message":"246","line":11,"column":5,"nodeType":"197","messageId":"198","endLine":11,"endColumn":17},{"ruleId":"195","severity":1,"message":"247","line":13,"column":5,"nodeType":"197","messageId":"198","endLine":13,"endColumn":13},{"ruleId":"195","severity":1,"message":"248","line":14,"column":5,"nodeType":"197","messageId":"198","endLine":14,"endColumn":17},{"ruleId":"195","severity":1,"message":"249","line":19,"column":5,"nodeType":"197","messageId":"198","endLine":19,"endColumn":13},{"ruleId":"195","severity":1,"message":"250","line":30,"column":10,"nodeType":"197","messageId":"198","endLine":30,"endColumn":20},{"ruleId":"195","severity":1,"message":"251","line":30,"column":46,"nodeType":"197","messageId":"198","endLine":30,"endColumn":53},{"ruleId":"195","severity":1,"message":"252","line":39,"column":10,"nodeType":"197","messageId":"198","endLine":39,"endColumn":18},{"ruleId":"201","severity":1,"message":"253","line":116,"column":8,"nodeType":"203","endLine":116,"endColumn":18,"suggestions":"254"},{"ruleId":"221","severity":1,"message":"222","line":121,"column":36,"nodeType":"223","messageId":"224","endLine":121,"endColumn":38},{"ruleId":"221","severity":1,"message":"238","line":122,"column":44,"nodeType":"223","messageId":"224","endLine":122,"endColumn":46},{"ruleId":"195","severity":1,"message":"255","line":187,"column":11,"nodeType":"197","messageId":"198","endLine":187,"endColumn":35},{"ruleId":"195","severity":1,"message":"235","line":1,"column":49,"nodeType":"197","messageId":"198","endLine":1,"endColumn":55},{"ruleId":"195","severity":1,"message":"256","line":7,"column":10,"nodeType":"197","messageId":"198","endLine":7,"endColumn":20},{"ruleId":"195","severity":1,"message":"257","line":7,"column":22,"nodeType":"197","messageId":"198","endLine":7,"endColumn":34},{"ruleId":"195","severity":1,"message":"258","line":8,"column":10,"nodeType":"197","messageId":"198","endLine":8,"endColumn":16},{"ruleId":"195","severity":1,"message":"259","line":8,"column":49,"nodeType":"197","messageId":"198","endLine":8,"endColumn":55},{"ruleId":"195","severity":1,"message":"229","line":8,"column":127,"nodeType":"197","messageId":"198","endLine":8,"endColumn":134},{"ruleId":"195","severity":1,"message":"260","line":8,"column":168,"nodeType":"197","messageId":"198","endLine":8,"endColumn":182},{"ruleId":"195","severity":1,"message":"261","line":152,"column":9,"nodeType":"197","messageId":"198","endLine":152,"endColumn":23},{"ruleId":"201","severity":1,"message":"215","line":155,"column":23,"nodeType":"216","endLine":155,"endColumn":60},{"ruleId":"217","severity":1,"message":"218","line":167,"column":47,"nodeType":"219","messageId":"220","endLine":167,"endColumn":49},{"ruleId":"195","severity":1,"message":"262","line":257,"column":35,"nodeType":"197","messageId":"198","endLine":257,"endColumn":41},{"ruleId":"221","severity":1,"message":"238","line":322,"column":31,"nodeType":"223","messageId":"224","endLine":322,"endColumn":33},{"ruleId":"189","replacedBy":"263"},{"ruleId":"191","replacedBy":"264"},{"ruleId":"195","severity":1,"message":"256","line":6,"column":10,"nodeType":"197","messageId":"198","endLine":6,"endColumn":20},{"ruleId":"195","severity":1,"message":"257","line":6,"column":22,"nodeType":"197","messageId":"198","endLine":6,"endColumn":34},{"ruleId":"195","severity":1,"message":"251","line":6,"column":36,"nodeType":"197","messageId":"198","endLine":6,"endColumn":43},{"ruleId":"195","severity":1,"message":"259","line":7,"column":36,"nodeType":"197","messageId":"198","endLine":7,"endColumn":42},{"ruleId":"201","severity":1,"message":"215","line":159,"column":23,"nodeType":"216","endLine":159,"endColumn":60},{"ruleId":"217","severity":1,"message":"218","line":185,"column":47,"nodeType":"219","messageId":"220","endLine":185,"endColumn":49},{"ruleId":"195","severity":1,"message":"265","line":250,"column":11,"nodeType":"197","messageId":"198","endLine":250,"endColumn":26},{"ruleId":"189","replacedBy":"266"},{"ruleId":"191","replacedBy":"267"},{"ruleId":"195","severity":1,"message":"232","line":15,"column":22,"nodeType":"197","messageId":"198","endLine":15,"endColumn":36},{"ruleId":"195","severity":1,"message":"268","line":16,"column":8,"nodeType":"197","messageId":"198","endLine":16,"endColumn":13},{"ruleId":"195","severity":1,"message":"269","line":20,"column":10,"nodeType":"197","messageId":"198","endLine":20,"endColumn":14},{"ruleId":"195","severity":1,"message":"270","line":55,"column":6,"nodeType":"197","messageId":"198","endLine":55,"endColumn":10},{"ruleId":"221","severity":1,"message":"238","line":125,"column":108,"nodeType":"223","messageId":"224","endLine":125,"endColumn":110},{"ruleId":"221","severity":1,"message":"222","line":125,"column":118,"nodeType":"223","messageId":"224","endLine":125,"endColumn":120},{"ruleId":"221","severity":1,"message":"238","line":131,"column":112,"nodeType":"223","messageId":"224","endLine":131,"endColumn":114},{"ruleId":"221","severity":1,"message":"222","line":131,"column":122,"nodeType":"223","messageId":"224","endLine":131,"endColumn":124},{"ruleId":"221","severity":1,"message":"222","line":133,"column":94,"nodeType":"223","messageId":"224","endLine":133,"endColumn":96},{"ruleId":"189","replacedBy":"271"},{"ruleId":"191","replacedBy":"272"},{"ruleId":"189","replacedBy":"273"},{"ruleId":"191","replacedBy":"274"},{"ruleId":"195","severity":1,"message":"275","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":27},{"ruleId":"195","severity":1,"message":"276","line":1,"column":29,"nodeType":"197","messageId":"198","endLine":1,"endColumn":37},{"ruleId":"195","severity":1,"message":"277","line":1,"column":39,"nodeType":"197","messageId":"198","endLine":1,"endColumn":48},{"ruleId":"195","severity":1,"message":"278","line":1,"column":58,"nodeType":"197","messageId":"198","endLine":1,"endColumn":77},{"ruleId":"195","severity":1,"message":"242","line":3,"column":10,"nodeType":"197","messageId":"198","endLine":3,"endColumn":19},{"ruleId":"195","severity":1,"message":"279","line":4,"column":10,"nodeType":"197","messageId":"198","endLine":4,"endColumn":13},{"ruleId":"195","severity":1,"message":"280","line":4,"column":15,"nodeType":"197","messageId":"198","endLine":4,"endColumn":21},{"ruleId":"195","severity":1,"message":"281","line":5,"column":10,"nodeType":"197","messageId":"198","endLine":5,"endColumn":24},{"ruleId":"195","severity":1,"message":"282","line":10,"column":7,"nodeType":"197","messageId":"198","endLine":10,"endColumn":17},{"ruleId":"195","severity":1,"message":"283","line":107,"column":7,"nodeType":"197","messageId":"198","endLine":107,"endColumn":23},{"ruleId":"221","severity":1,"message":"222","line":122,"column":59,"nodeType":"223","messageId":"224","endLine":122,"endColumn":61},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],["284"],["285"],"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","'Drawer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["286"],"'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'crt' is assigned a value but never used.","'setCrt' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["287"],"Assignments to the 'sessionUser' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-redeclare","'Category' is already defined.","redeclared","'Paper' is defined but never used.","'Divider' is defined but never used.","'ButtonBase' is defined but never used.","'OverridableComponent' is defined but never used.","'PaginationItem' is defined but never used.","'PaginationItemTypeMap' is defined but never used.","'MutableRefObject' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'loadContents'. Either include it or remove the dependency array.",["288"],"Expected '!==' and instead saw '!='.","'Sidebar' is defined but never used.","'useSelector' is defined but never used.","'member' is defined but never used.","'RootState' is defined but never used.","'SpanLoginFocus' is assigned a value but never used.",["284"],["285"],"'ListItemIcon' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'Checkbox' is defined but never used.","'StarBorder' is defined but never used.","'Comment' is defined but never used.","'promises' is defined but never used.","React Hook useEffect has a missing dependency: 'findParent'. Either include it or remove the dependency array.",["289"],"'handleMultiDownloadAsZip' is assigned a value but never used.","'ExpandMore' is defined but never used.","'ChevronRight' is defined but never used.","'Avatar' is defined but never used.","'colors' is defined but never used.","'ListItemAvatar' is defined but never used.","'temp' is defined but never used.","'result' is assigned a value but never used.",["284"],["285"],"'handleAlertOpen' is assigned a value but never used.",["284"],["285"],"'axios' is defined but never used.","'Link' is defined but never used.","'Page' is defined but never used.",["284"],["285"],["284"],["285"],"'forwardRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'InputHTMLAttributes' is defined but never used.","'add' is defined but never used.","'remove' is defined but never used.","'preProcessFile' is defined but never used.","'PContainer' is assigned a value but never used.","'SpanFileErrorMsg' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},"Update the dependencies array to be: [dispatch, user]",{"range":"298","text":"299"},"Update the dependencies array to be: [pageNum, search]",{"range":"300","text":"301"},"Update the dependencies array to be: [loadContents, pageNum]",{"range":"302","text":"303"},"Update the dependencies array to be: [assetSeq, findParent]",{"range":"304","text":"305"},[884,890],"[dispatch, user]",[5815,5824],"[pageNum, search]",[2464,2473],"[loadContents, pageNum]",[2924,2934],"[assetSeq, findParent]"]